// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/apache/thrift/lib/go/thrift"
	"github.com/joint-song/gohive/fb303"
        "github.com/joint-song/gohive/hive_metastore"
)

var _ = fb303.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
  fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void create_catalog(CreateCatalogRequest catalog)")
  fmt.Fprintln(os.Stderr, "  void alter_catalog(AlterCatalogRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetCatalogResponse get_catalog(GetCatalogRequest catName)")
  fmt.Fprintln(os.Stderr, "  GetCatalogsResponse get_catalogs()")
  fmt.Fprintln(os.Stderr, "  void drop_catalog(DropCatalogRequest catName)")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  Database get_database_req(GetDatabaseRequest request)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  void create_dataconnector(DataConnector connector)")
  fmt.Fprintln(os.Stderr, "  DataConnector get_dataconnector_req(GetDataConnectorRequest request)")
  fmt.Fprintln(os.Stderr, "  void drop_dataconnector(string name, bool ifNotExists, bool checkReferences)")
  fmt.Fprintln(os.Stderr, "   get_dataconnectors()")
  fmt.Fprintln(os.Stderr, "  void alter_dataconnector(string name, DataConnector connector)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  GetFieldsResponse get_fields_req(GetFieldsRequest req)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  GetSchemaResponse get_schema_req(GetSchemaRequest req)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints,  defaultConstraints,  checkConstraints)")
  fmt.Fprintln(os.Stderr, "  void create_table_req(CreateTableRequest request)")
  fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_default_constraint(AddDefaultConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_check_constraint(AddCheckConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
  fmt.Fprintln(os.Stderr, "  TruncateTableResponse truncate_table_req(TruncateTableRequest req)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
  fmt.Fprintln(os.Stderr, "   get_all_materialized_view_objects_for_rewriting()")
  fmt.Fprintln(os.Stderr, "   get_materialized_views_for_rewriting(string db_name)")
  fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "   get_tables_ext(GetTablesExtRequest req)")
  fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
  fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
  fmt.Fprintln(os.Stderr, "  Materialization get_materialization_invalidation_info(CreationMetadata creation_metadata, string validTxnList)")
  fmt.Fprintln(os.Stderr, "  void update_creation_metadata(string catName, string dbname, string tbl_name, CreationMetadata creation_metadata)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
  fmt.Fprintln(os.Stderr, "  AlterTableResponse alter_table_req(AlterTableRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  GetPartitionResponse get_partition_req(GetPartitionRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionsResponse get_partitions_req(PartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  GetPartitionsPsWithAuthResponse get_partitions_ps_with_auth_req(GetPartitionsPsWithAuthRequest req)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  GetPartitionNamesPsResponse get_partition_names_ps_req(GetPartitionNamesPsRequest req)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_req(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  PartitionsSpecByExprResult get_partitions_spec_by_expr(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  GetPartitionsByNamesResult get_partitions_by_names_req(GetPartitionsByNamesRequest req)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  AlterPartitionsResponse alter_partitions_req(AlterPartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  RenamePartitionResponse rename_partition_req(RenamePartitionRequest req)")
  fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  DefaultConstraintsResponse get_default_constraints(DefaultConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  CheckConstraintsResponse get_check_constraints(CheckConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  AllTableConstraintsResponse get_all_table_constraints(AllTableConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  SetPartitionsStatsResponse update_table_column_statistics_req(SetPartitionsStatsRequest req)")
  fmt.Fprintln(os.Stderr, "  SetPartitionsStatsResponse update_partition_column_statistics_req(SetPartitionsStatsRequest req)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name, string engine)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name, string engine)")
  fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
  fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
  fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
  fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse refresh_privileges(HiveObjectRef objToRefresh, string authorizer, GrantRevokePrivilegeRequest grantRequest)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
  fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
  fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
  fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
  fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
  fmt.Fprintln(os.Stderr, "   get_master_keys()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
  fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  i64 get_latest_txnid_in_conflict(i64 txnId)")
  fmt.Fprintln(os.Stderr, "  void repl_tbl_writeid_state(ReplTblWriteIdStateRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetValidWriteIdsResponse get_valid_write_ids(GetValidWriteIdsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  AllocateTableWriteIdsResponse allocate_table_write_ids(AllocateTableWriteIdsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  MaxAllocatedTableWriteIdResponse get_max_allocated_table_write_id(MaxAllocatedTableWriteIdRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void seed_write_id(SeedTableWriteIdsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void seed_txn_id(SeedTxnIdRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
  fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
  fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
  fmt.Fprintln(os.Stderr, "  OptionalCompactionInfoStruct find_next_compact(string workerId, string workerVersion)")
  fmt.Fprintln(os.Stderr, "  void update_compactor_state(CompactionInfoStruct cr, i64 txn_id)")
  fmt.Fprintln(os.Stderr, "   find_columns_with_stats(CompactionInfoStruct cr)")
  fmt.Fprintln(os.Stderr, "  void mark_cleaned(CompactionInfoStruct cr)")
  fmt.Fprintln(os.Stderr, "  void mark_compacted(CompactionInfoStruct cr)")
  fmt.Fprintln(os.Stderr, "  void mark_failed(CompactionInfoStruct cr)")
  fmt.Fprintln(os.Stderr, "  void set_hadoop_jobid(string jobId, i64 cq_id)")
  fmt.Fprintln(os.Stderr, "  GetLatestCommittedCompactionInfoResponse get_latest_committed_compaction_info(GetLatestCommittedCompactionInfoRequest rqst)")
  fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
  fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
  fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void flushCache()")
  fmt.Fprintln(os.Stderr, "  WriteNotificationLogResponse add_write_notification_log(WriteNotificationLogRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
  fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreatePoolResponse create_wm_pool(WMCreatePoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterPoolResponse alter_wm_pool(WMAlterPoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropPoolResponse drop_wm_pool(WMDropPoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateOrUpdateMappingResponse create_or_update_wm_mapping(WMCreateOrUpdateMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropMappingResponse drop_wm_mapping(WMDropMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateOrDropTriggerToPoolMappingResponse create_or_drop_wm_trigger_to_pool_mapping(WMCreateOrDropTriggerToPoolMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  void create_ischema(ISchema schema)")
  fmt.Fprintln(os.Stderr, "  void alter_ischema(AlterISchemaRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ISchema get_ischema(ISchemaName name)")
  fmt.Fprintln(os.Stderr, "  void drop_ischema(ISchemaName name)")
  fmt.Fprintln(os.Stderr, "  void add_schema_version(SchemaVersion schemaVersion)")
  fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_version(SchemaVersionDescriptor schemaVersion)")
  fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_latest_version(ISchemaName schemaName)")
  fmt.Fprintln(os.Stderr, "   get_schema_all_versions(ISchemaName schemaName)")
  fmt.Fprintln(os.Stderr, "  void drop_schema_version(SchemaVersionDescriptor schemaVersion)")
  fmt.Fprintln(os.Stderr, "  FindSchemasByColsResp get_schemas_by_cols(FindSchemasByColsRqst rqst)")
  fmt.Fprintln(os.Stderr, "  void map_schema_version_to_serde(MapSchemaVersionToSerdeRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void set_schema_version_state(SetSchemaVersionStateRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_serde(SerDeInfo serde)")
  fmt.Fprintln(os.Stderr, "  SerDeInfo get_serde(GetSerdeRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse get_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
  fmt.Fprintln(os.Stderr, "  bool heartbeat_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
  fmt.Fprintln(os.Stderr, "  void add_runtime_stats(RuntimeStat stat)")
  fmt.Fprintln(os.Stderr, "   get_runtime_stats(GetRuntimeStatsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetPartitionsResponse get_partitions_with_specs(GetPartitionsRequest request)")
  fmt.Fprintln(os.Stderr, "  ScheduledQueryPollResponse scheduled_query_poll(ScheduledQueryPollRequest request)")
  fmt.Fprintln(os.Stderr, "  void scheduled_query_maintenance(ScheduledQueryMaintenanceRequest request)")
  fmt.Fprintln(os.Stderr, "  void scheduled_query_progress(ScheduledQueryProgressInfo info)")
  fmt.Fprintln(os.Stderr, "  ScheduledQuery get_scheduled_query(ScheduledQueryKey scheduleKey)")
  fmt.Fprintln(os.Stderr, "  void add_replication_metrics(ReplicationMetricList replicationMetricList)")
  fmt.Fprintln(os.Stderr, "  ReplicationMetricList get_replication_metrics(GetReplicationMetricsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns_req(GetOpenTxnsRequest getOpenTxnsRequest)")
  fmt.Fprintln(os.Stderr, "  void create_stored_procedure(StoredProcedure proc)")
  fmt.Fprintln(os.Stderr, "  StoredProcedure get_stored_procedure(StoredProcedureRequest request)")
  fmt.Fprintln(os.Stderr, "  void drop_stored_procedure(StoredProcedureRequest request)")
  fmt.Fprintln(os.Stderr, "   get_all_stored_procedures(ListStoredProcedureRequest request)")
  fmt.Fprintln(os.Stderr, "  Package find_package(GetPackageRequest request)")
  fmt.Fprintln(os.Stderr, "  void add_package(AddPackageRequest request)")
  fmt.Fprintln(os.Stderr, "   get_all_packages(ListPackageRequest request)")
  fmt.Fprintln(os.Stderr, "  void drop_package(DropPackageRequest request)")
  fmt.Fprintln(os.Stderr, "  string getName()")
  fmt.Fprintln(os.Stderr, "  string getVersion()")
  fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
  fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
  fmt.Fprintln(os.Stderr, "   getCounters()")
  fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
  fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
  fmt.Fprintln(os.Stderr, "  string getOption(string key)")
  fmt.Fprintln(os.Stderr, "   getOptions()")
  fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
  fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
  fmt.Fprintln(os.Stderr, "  void reinitialize()")
  fmt.Fprintln(os.Stderr, "  void shutdown()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := hive_metastore.NewThriftHiveMetastoreClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getMetaConf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMetaConf(value0))
    fmt.Print("\n")
    break
  case "setMetaConf":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetMetaConf(value0, value1))
    fmt.Print("\n")
    break
  case "create_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateCatalog requires 1 args")
      flag.Usage()
    }
    arg792 := flag.Arg(1)
    mbTrans793 := thrift.NewTMemoryBufferLen(len(arg792))
    defer mbTrans793.Close()
    _, err794 := mbTrans793.WriteString(arg792)
    if err794 != nil {
      Usage()
      return
    }
    factory795 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt796 := factory795.GetProtocol(mbTrans793)
    argvalue0 := hive_metastore.NewCreateCatalogRequest()
    err797 := argvalue0.Read(jsProt796)
    if err797 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateCatalog(value0))
    fmt.Print("\n")
    break
  case "alter_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterCatalog requires 1 args")
      flag.Usage()
    }
    arg798 := flag.Arg(1)
    mbTrans799 := thrift.NewTMemoryBufferLen(len(arg798))
    defer mbTrans799.Close()
    _, err800 := mbTrans799.WriteString(arg798)
    if err800 != nil {
      Usage()
      return
    }
    factory801 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt802 := factory801.GetProtocol(mbTrans799)
    argvalue0 := hive_metastore.NewAlterCatalogRequest()
    err803 := argvalue0.Read(jsProt802)
    if err803 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterCatalog(value0))
    fmt.Print("\n")
    break
  case "get_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCatalog requires 1 args")
      flag.Usage()
    }
    arg804 := flag.Arg(1)
    mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
    defer mbTrans805.Close()
    _, err806 := mbTrans805.WriteString(arg804)
    if err806 != nil {
      Usage()
      return
    }
    factory807 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt808 := factory807.GetProtocol(mbTrans805)
    argvalue0 := hive_metastore.NewGetCatalogRequest()
    err809 := argvalue0.Read(jsProt808)
    if err809 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCatalog(value0))
    fmt.Print("\n")
    break
  case "get_catalogs":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCatalogs requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCatalogs())
    fmt.Print("\n")
    break
  case "drop_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropCatalog requires 1 args")
      flag.Usage()
    }
    arg810 := flag.Arg(1)
    mbTrans811 := thrift.NewTMemoryBufferLen(len(arg810))
    defer mbTrans811.Close()
    _, err812 := mbTrans811.WriteString(arg810)
    if err812 != nil {
      Usage()
      return
    }
    factory813 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt814 := factory813.GetProtocol(mbTrans811)
    argvalue0 := hive_metastore.NewDropCatalogRequest()
    err815 := argvalue0.Read(jsProt814)
    if err815 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropCatalog(value0))
    fmt.Print("\n")
    break
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg816 := flag.Arg(1)
    mbTrans817 := thrift.NewTMemoryBufferLen(len(arg816))
    defer mbTrans817.Close()
    _, err818 := mbTrans817.WriteString(arg816)
    if err818 != nil {
      Usage()
      return
    }
    factory819 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt820 := factory819.GetProtocol(mbTrans817)
    argvalue0 := hive_metastore.NewDatabase()
    err821 := argvalue0.Read(jsProt820)
    if err821 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(value0))
    fmt.Print("\n")
    break
  case "get_database_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabaseReq requires 1 args")
      flag.Usage()
    }
    arg823 := flag.Arg(1)
    mbTrans824 := thrift.NewTMemoryBufferLen(len(arg823))
    defer mbTrans824.Close()
    _, err825 := mbTrans824.WriteString(arg823)
    if err825 != nil {
      Usage()
      return
    }
    factory826 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt827 := factory826.GetProtocol(mbTrans824)
    argvalue0 := hive_metastore.NewGetDatabaseRequest()
    err828 := argvalue0.Read(jsProt827)
    if err828 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDatabaseReq(value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases())
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg834 := flag.Arg(2)
    mbTrans835 := thrift.NewTMemoryBufferLen(len(arg834))
    defer mbTrans835.Close()
    _, err836 := mbTrans835.WriteString(arg834)
    if err836 != nil {
      Usage()
      return
    }
    factory837 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt838 := factory837.GetProtocol(mbTrans835)
    argvalue1 := hive_metastore.NewDatabase()
    err839 := argvalue1.Read(jsProt838)
    if err839 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(value0, value1))
    fmt.Print("\n")
    break
  case "create_dataconnector":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDataconnector requires 1 args")
      flag.Usage()
    }
    arg840 := flag.Arg(1)
    mbTrans841 := thrift.NewTMemoryBufferLen(len(arg840))
    defer mbTrans841.Close()
    _, err842 := mbTrans841.WriteString(arg840)
    if err842 != nil {
      Usage()
      return
    }
    factory843 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt844 := factory843.GetProtocol(mbTrans841)
    argvalue0 := hive_metastore.NewDataConnector()
    err845 := argvalue0.Read(jsProt844)
    if err845 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDataconnector(value0))
    fmt.Print("\n")
    break
  case "get_dataconnector_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDataconnectorReq requires 1 args")
      flag.Usage()
    }
    arg846 := flag.Arg(1)
    mbTrans847 := thrift.NewTMemoryBufferLen(len(arg846))
    defer mbTrans847.Close()
    _, err848 := mbTrans847.WriteString(arg846)
    if err848 != nil {
      Usage()
      return
    }
    factory849 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt850 := factory849.GetProtocol(mbTrans847)
    argvalue0 := hive_metastore.NewGetDataConnectorRequest()
    err851 := argvalue0.Read(jsProt850)
    if err851 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDataconnectorReq(value0))
    fmt.Print("\n")
    break
  case "drop_dataconnector":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDataconnector requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDataconnector(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_dataconnectors":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetDataconnectors requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetDataconnectors())
    fmt.Print("\n")
    break
  case "alter_dataconnector":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDataconnector requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg856 := flag.Arg(2)
    mbTrans857 := thrift.NewTMemoryBufferLen(len(arg856))
    defer mbTrans857.Close()
    _, err858 := mbTrans857.WriteString(arg856)
    if err858 != nil {
      Usage()
      return
    }
    factory859 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt860 := factory859.GetProtocol(mbTrans857)
    argvalue1 := hive_metastore.NewDataConnector()
    err861 := argvalue1.Read(jsProt860)
    if err861 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDataconnector(value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg863 := flag.Arg(1)
    mbTrans864 := thrift.NewTMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue0 := hive_metastore.NewType()
    err868 := argvalue0.Read(jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(value0, value1))
    fmt.Print("\n")
    break
  case "get_fields_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg875 := flag.Arg(3)
    mbTrans876 := thrift.NewTMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err880 := argvalue2.Read(jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetFieldsWithEnvironmentContext(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_fields_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFieldsReq requires 1 args")
      flag.Usage()
    }
    arg881 := flag.Arg(1)
    mbTrans882 := thrift.NewTMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue0 := hive_metastore.NewGetFieldsRequest()
    err886 := argvalue0.Read(jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFieldsReq(value0))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(value0, value1))
    fmt.Print("\n")
    break
  case "get_schema_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg891 := flag.Arg(3)
    mbTrans892 := thrift.NewTMemoryBufferLen(len(arg891))
    defer mbTrans892.Close()
    _, err893 := mbTrans892.WriteString(arg891)
    if err893 != nil {
      Usage()
      return
    }
    factory894 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt895 := factory894.GetProtocol(mbTrans892)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err896 := argvalue2.Read(jsProt895)
    if err896 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetSchemaWithEnvironmentContext(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_schema_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaReq requires 1 args")
      flag.Usage()
    }
    arg897 := flag.Arg(1)
    mbTrans898 := thrift.NewTMemoryBufferLen(len(arg897))
    defer mbTrans898.Close()
    _, err899 := mbTrans898.WriteString(arg897)
    if err899 != nil {
      Usage()
      return
    }
    factory900 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt901 := factory900.GetProtocol(mbTrans898)
    argvalue0 := hive_metastore.NewGetSchemaRequest()
    err902 := argvalue0.Read(jsProt901)
    if err902 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaReq(value0))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg903 := flag.Arg(1)
    mbTrans904 := thrift.NewTMemoryBufferLen(len(arg903))
    defer mbTrans904.Close()
    _, err905 := mbTrans904.WriteString(arg903)
    if err905 != nil {
      Usage()
      return
    }
    factory906 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt907 := factory906.GetProtocol(mbTrans904)
    argvalue0 := hive_metastore.NewTable()
    err908 := argvalue0.Read(jsProt907)
    if err908 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg909 := flag.Arg(1)
    mbTrans910 := thrift.NewTMemoryBufferLen(len(arg909))
    defer mbTrans910.Close()
    _, err911 := mbTrans910.WriteString(arg909)
    if err911 != nil {
      Usage()
      return
    }
    factory912 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt913 := factory912.GetProtocol(mbTrans910)
    argvalue0 := hive_metastore.NewTable()
    err914 := argvalue0.Read(jsProt913)
    if err914 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg915 := flag.Arg(2)
    mbTrans916 := thrift.NewTMemoryBufferLen(len(arg915))
    defer mbTrans916.Close()
    _, err917 := mbTrans916.WriteString(arg915)
    if err917 != nil {
      Usage()
      return
    }
    factory918 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt919 := factory918.GetProtocol(mbTrans916)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err920 := argvalue1.Read(jsProt919)
    if err920 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(value0, value1))
    fmt.Print("\n")
    break
  case "create_table_with_constraints":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 7 args")
      flag.Usage()
    }
    arg921 := flag.Arg(1)
    mbTrans922 := thrift.NewTMemoryBufferLen(len(arg921))
    defer mbTrans922.Close()
    _, err923 := mbTrans922.WriteString(arg921)
    if err923 != nil {
      Usage()
      return
    }
    factory924 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt925 := factory924.GetProtocol(mbTrans922)
    argvalue0 := hive_metastore.NewTable()
    err926 := argvalue0.Read(jsProt925)
    if err926 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg927 := flag.Arg(2)
    mbTrans928 := thrift.NewTMemoryBufferLen(len(arg927))
    defer mbTrans928.Close()
    _, err929 := mbTrans928.WriteString(arg927)
    if err929 != nil { 
      Usage()
      return
    }
    factory930 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt931 := factory930.GetProtocol(mbTrans928)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err932 := containerStruct1.ReadField2(jsProt931)
    if err932 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PrimaryKeys
    value1 := argvalue1
    arg933 := flag.Arg(3)
    mbTrans934 := thrift.NewTMemoryBufferLen(len(arg933))
    defer mbTrans934.Close()
    _, err935 := mbTrans934.WriteString(arg933)
    if err935 != nil { 
      Usage()
      return
    }
    factory936 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt937 := factory936.GetProtocol(mbTrans934)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err938 := containerStruct2.ReadField3(jsProt937)
    if err938 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ForeignKeys
    value2 := argvalue2
    arg939 := flag.Arg(4)
    mbTrans940 := thrift.NewTMemoryBufferLen(len(arg939))
    defer mbTrans940.Close()
    _, err941 := mbTrans940.WriteString(arg939)
    if err941 != nil { 
      Usage()
      return
    }
    factory942 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt943 := factory942.GetProtocol(mbTrans940)
    containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err944 := containerStruct3.ReadField4(jsProt943)
    if err944 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UniqueConstraints
    value3 := argvalue3
    arg945 := flag.Arg(5)
    mbTrans946 := thrift.NewTMemoryBufferLen(len(arg945))
    defer mbTrans946.Close()
    _, err947 := mbTrans946.WriteString(arg945)
    if err947 != nil { 
      Usage()
      return
    }
    factory948 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt949 := factory948.GetProtocol(mbTrans946)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err950 := containerStruct4.ReadField5(jsProt949)
    if err950 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.NotNullConstraints
    value4 := argvalue4
    arg951 := flag.Arg(6)
    mbTrans952 := thrift.NewTMemoryBufferLen(len(arg951))
    defer mbTrans952.Close()
    _, err953 := mbTrans952.WriteString(arg951)
    if err953 != nil { 
      Usage()
      return
    }
    factory954 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt955 := factory954.GetProtocol(mbTrans952)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err956 := containerStruct5.ReadField6(jsProt955)
    if err956 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.DefaultConstraints
    value5 := argvalue5
    arg957 := flag.Arg(7)
    mbTrans958 := thrift.NewTMemoryBufferLen(len(arg957))
    defer mbTrans958.Close()
    _, err959 := mbTrans958.WriteString(arg957)
    if err959 != nil { 
      Usage()
      return
    }
    factory960 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt961 := factory960.GetProtocol(mbTrans958)
    containerStruct6 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err962 := containerStruct6.ReadField7(jsProt961)
    if err962 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.CheckConstraints
    value6 := argvalue6
    fmt.Print(client.CreateTableWithConstraints(value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "create_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTableReq requires 1 args")
      flag.Usage()
    }
    arg963 := flag.Arg(1)
    mbTrans964 := thrift.NewTMemoryBufferLen(len(arg963))
    defer mbTrans964.Close()
    _, err965 := mbTrans964.WriteString(arg963)
    if err965 != nil {
      Usage()
      return
    }
    factory966 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt967 := factory966.GetProtocol(mbTrans964)
    argvalue0 := hive_metastore.NewCreateTableRequest()
    err968 := argvalue0.Read(jsProt967)
    if err968 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTableReq(value0))
    fmt.Print("\n")
    break
  case "drop_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
      flag.Usage()
    }
    arg969 := flag.Arg(1)
    mbTrans970 := thrift.NewTMemoryBufferLen(len(arg969))
    defer mbTrans970.Close()
    _, err971 := mbTrans970.WriteString(arg969)
    if err971 != nil {
      Usage()
      return
    }
    factory972 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt973 := factory972.GetProtocol(mbTrans970)
    argvalue0 := hive_metastore.NewDropConstraintRequest()
    err974 := argvalue0.Read(jsProt973)
    if err974 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropConstraint(value0))
    fmt.Print("\n")
    break
  case "add_primary_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
      flag.Usage()
    }
    arg975 := flag.Arg(1)
    mbTrans976 := thrift.NewTMemoryBufferLen(len(arg975))
    defer mbTrans976.Close()
    _, err977 := mbTrans976.WriteString(arg975)
    if err977 != nil {
      Usage()
      return
    }
    factory978 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt979 := factory978.GetProtocol(mbTrans976)
    argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
    err980 := argvalue0.Read(jsProt979)
    if err980 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPrimaryKey(value0))
    fmt.Print("\n")
    break
  case "add_foreign_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
      flag.Usage()
    }
    arg981 := flag.Arg(1)
    mbTrans982 := thrift.NewTMemoryBufferLen(len(arg981))
    defer mbTrans982.Close()
    _, err983 := mbTrans982.WriteString(arg981)
    if err983 != nil {
      Usage()
      return
    }
    factory984 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt985 := factory984.GetProtocol(mbTrans982)
    argvalue0 := hive_metastore.NewAddForeignKeyRequest()
    err986 := argvalue0.Read(jsProt985)
    if err986 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddForeignKey(value0))
    fmt.Print("\n")
    break
  case "add_unique_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
      flag.Usage()
    }
    arg987 := flag.Arg(1)
    mbTrans988 := thrift.NewTMemoryBufferLen(len(arg987))
    defer mbTrans988.Close()
    _, err989 := mbTrans988.WriteString(arg987)
    if err989 != nil {
      Usage()
      return
    }
    factory990 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt991 := factory990.GetProtocol(mbTrans988)
    argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
    err992 := argvalue0.Read(jsProt991)
    if err992 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUniqueConstraint(value0))
    fmt.Print("\n")
    break
  case "add_not_null_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
      flag.Usage()
    }
    arg993 := flag.Arg(1)
    mbTrans994 := thrift.NewTMemoryBufferLen(len(arg993))
    defer mbTrans994.Close()
    _, err995 := mbTrans994.WriteString(arg993)
    if err995 != nil {
      Usage()
      return
    }
    factory996 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt997 := factory996.GetProtocol(mbTrans994)
    argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
    err998 := argvalue0.Read(jsProt997)
    if err998 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddNotNullConstraint(value0))
    fmt.Print("\n")
    break
  case "add_default_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDefaultConstraint requires 1 args")
      flag.Usage()
    }
    arg999 := flag.Arg(1)
    mbTrans1000 := thrift.NewTMemoryBufferLen(len(arg999))
    defer mbTrans1000.Close()
    _, err1001 := mbTrans1000.WriteString(arg999)
    if err1001 != nil {
      Usage()
      return
    }
    factory1002 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1003 := factory1002.GetProtocol(mbTrans1000)
    argvalue0 := hive_metastore.NewAddDefaultConstraintRequest()
    err1004 := argvalue0.Read(jsProt1003)
    if err1004 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDefaultConstraint(value0))
    fmt.Print("\n")
    break
  case "add_check_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddCheckConstraint requires 1 args")
      flag.Usage()
    }
    arg1005 := flag.Arg(1)
    mbTrans1006 := thrift.NewTMemoryBufferLen(len(arg1005))
    defer mbTrans1006.Close()
    _, err1007 := mbTrans1006.WriteString(arg1005)
    if err1007 != nil {
      Usage()
      return
    }
    factory1008 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1009 := factory1008.GetProtocol(mbTrans1006)
    argvalue0 := hive_metastore.NewAddCheckConstraintRequest()
    err1010 := argvalue0.Read(jsProt1009)
    if err1010 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddCheckConstraint(value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg1017 := flag.Arg(4)
    mbTrans1018 := thrift.NewTMemoryBufferLen(len(arg1017))
    defer mbTrans1018.Close()
    _, err1019 := mbTrans1018.WriteString(arg1017)
    if err1019 != nil {
      Usage()
      return
    }
    factory1020 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1021 := factory1020.GetProtocol(mbTrans1018)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1022 := argvalue3.Read(jsProt1021)
    if err1022 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DropTableWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "truncate_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1025 := flag.Arg(3)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil { 
      Usage()
      return
    }
    factory1028 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
    err1030 := containerStruct2.ReadField3(jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartNames
    value2 := argvalue2
    fmt.Print(client.TruncateTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "truncate_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TruncateTableReq requires 1 args")
      flag.Usage()
    }
    arg1031 := flag.Arg(1)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue0 := hive_metastore.NewTruncateTableRequest()
    err1036 := argvalue0.Read(jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TruncateTableReq(value0))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(value0, value1))
    fmt.Print("\n")
    break
  case "get_tables_by_type":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTablesByType(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_materialized_view_objects_for_rewriting":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllMaterializedViewObjectsForRewriting requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllMaterializedViewObjectsForRewriting())
    fmt.Print("\n")
    break
  case "get_materialized_views_for_rewriting":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMaterializedViewsForRewriting requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMaterializedViewsForRewriting(value0))
    fmt.Print("\n")
    break
  case "get_table_meta":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1045 := flag.Arg(3)
    mbTrans1046 := thrift.NewTMemoryBufferLen(len(arg1045))
    defer mbTrans1046.Close()
    _, err1047 := mbTrans1046.WriteString(arg1045)
    if err1047 != nil { 
      Usage()
      return
    }
    factory1048 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1049 := factory1048.GetProtocol(mbTrans1046)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
    err1050 := containerStruct2.ReadField3(jsProt1049)
    if err1050 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.TblTypes
    value2 := argvalue2
    fmt.Print(client.GetTableMeta(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1055 := flag.Arg(2)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil { 
      Usage()
      return
    }
    factory1058 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err1060 := containerStruct1.ReadField2(jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(value0, value1))
    fmt.Print("\n")
    break
  case "get_tables_ext":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTablesExt requires 1 args")
      flag.Usage()
    }
    arg1061 := flag.Arg(1)
    mbTrans1062 := thrift.NewTMemoryBufferLen(len(arg1061))
    defer mbTrans1062.Close()
    _, err1063 := mbTrans1062.WriteString(arg1061)
    if err1063 != nil {
      Usage()
      return
    }
    factory1064 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1065 := factory1064.GetProtocol(mbTrans1062)
    argvalue0 := hive_metastore.NewGetTablesExtRequest()
    err1066 := argvalue0.Read(jsProt1065)
    if err1066 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTablesExt(value0))
    fmt.Print("\n")
    break
  case "get_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
      flag.Usage()
    }
    arg1067 := flag.Arg(1)
    mbTrans1068 := thrift.NewTMemoryBufferLen(len(arg1067))
    defer mbTrans1068.Close()
    _, err1069 := mbTrans1068.WriteString(arg1067)
    if err1069 != nil {
      Usage()
      return
    }
    factory1070 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1071 := factory1070.GetProtocol(mbTrans1068)
    argvalue0 := hive_metastore.NewGetTableRequest()
    err1072 := argvalue0.Read(jsProt1071)
    if err1072 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableReq(value0))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
      flag.Usage()
    }
    arg1073 := flag.Arg(1)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue0 := hive_metastore.NewGetTablesRequest()
    err1078 := argvalue0.Read(jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableObjectsByNameReq(value0))
    fmt.Print("\n")
    break
  case "get_materialization_invalidation_info":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMaterializationInvalidationInfo requires 2 args")
      flag.Usage()
    }
    arg1079 := flag.Arg(1)
    mbTrans1080 := thrift.NewTMemoryBufferLen(len(arg1079))
    defer mbTrans1080.Close()
    _, err1081 := mbTrans1080.WriteString(arg1079)
    if err1081 != nil {
      Usage()
      return
    }
    factory1082 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1083 := factory1082.GetProtocol(mbTrans1080)
    argvalue0 := hive_metastore.NewCreationMetadata()
    err1084 := argvalue0.Read(jsProt1083)
    if err1084 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetMaterializationInvalidationInfo(value0, value1))
    fmt.Print("\n")
    break
  case "update_creation_metadata":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateCreationMetadata requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1089 := flag.Arg(4)
    mbTrans1090 := thrift.NewTMemoryBufferLen(len(arg1089))
    defer mbTrans1090.Close()
    _, err1091 := mbTrans1090.WriteString(arg1089)
    if err1091 != nil {
      Usage()
      return
    }
    factory1092 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1093 := factory1092.GetProtocol(mbTrans1090)
    argvalue3 := hive_metastore.NewCreationMetadata()
    err1094 := argvalue3.Read(jsProt1093)
    if err1094 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateCreationMetadata(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1097 := (strconv.Atoi(flag.Arg(3)))
    if err1097 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1100 := flag.Arg(3)
    mbTrans1101 := thrift.NewTMemoryBufferLen(len(arg1100))
    defer mbTrans1101.Close()
    _, err1102 := mbTrans1101.WriteString(arg1100)
    if err1102 != nil {
      Usage()
      return
    }
    factory1103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1104 := factory1103.GetProtocol(mbTrans1101)
    argvalue2 := hive_metastore.NewTable()
    err1105 := argvalue2.Read(jsProt1104)
    if err1105 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1108 := flag.Arg(3)
    mbTrans1109 := thrift.NewTMemoryBufferLen(len(arg1108))
    defer mbTrans1109.Close()
    _, err1110 := mbTrans1109.WriteString(arg1108)
    if err1110 != nil {
      Usage()
      return
    }
    factory1111 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1112 := factory1111.GetProtocol(mbTrans1109)
    argvalue2 := hive_metastore.NewTable()
    err1113 := argvalue2.Read(jsProt1112)
    if err1113 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1114 := flag.Arg(4)
    mbTrans1115 := thrift.NewTMemoryBufferLen(len(arg1114))
    defer mbTrans1115.Close()
    _, err1116 := mbTrans1115.WriteString(arg1114)
    if err1116 != nil {
      Usage()
      return
    }
    factory1117 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1118 := factory1117.GetProtocol(mbTrans1115)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1119 := argvalue3.Read(jsProt1118)
    if err1119 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_table_with_cascade":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1122 := flag.Arg(3)
    mbTrans1123 := thrift.NewTMemoryBufferLen(len(arg1122))
    defer mbTrans1123.Close()
    _, err1124 := mbTrans1123.WriteString(arg1122)
    if err1124 != nil {
      Usage()
      return
    }
    factory1125 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1126 := factory1125.GetProtocol(mbTrans1123)
    argvalue2 := hive_metastore.NewTable()
    err1127 := argvalue2.Read(jsProt1126)
    if err1127 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.AlterTableWithCascade(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTableReq requires 1 args")
      flag.Usage()
    }
    arg1129 := flag.Arg(1)
    mbTrans1130 := thrift.NewTMemoryBufferLen(len(arg1129))
    defer mbTrans1130.Close()
    _, err1131 := mbTrans1130.WriteString(arg1129)
    if err1131 != nil {
      Usage()
      return
    }
    factory1132 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1133 := factory1132.GetProtocol(mbTrans1130)
    argvalue0 := hive_metastore.NewAlterTableRequest()
    err1134 := argvalue0.Read(jsProt1133)
    if err1134 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTableReq(value0))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg1135 := flag.Arg(1)
    mbTrans1136 := thrift.NewTMemoryBufferLen(len(arg1135))
    defer mbTrans1136.Close()
    _, err1137 := mbTrans1136.WriteString(arg1135)
    if err1137 != nil {
      Usage()
      return
    }
    factory1138 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1139 := factory1138.GetProtocol(mbTrans1136)
    argvalue0 := hive_metastore.NewPartition()
    err1140 := argvalue0.Read(jsProt1139)
    if err1140 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg1141 := flag.Arg(1)
    mbTrans1142 := thrift.NewTMemoryBufferLen(len(arg1141))
    defer mbTrans1142.Close()
    _, err1143 := mbTrans1142.WriteString(arg1141)
    if err1143 != nil {
      Usage()
      return
    }
    factory1144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1145 := factory1144.GetProtocol(mbTrans1142)
    argvalue0 := hive_metastore.NewPartition()
    err1146 := argvalue0.Read(jsProt1145)
    if err1146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1147 := flag.Arg(2)
    mbTrans1148 := thrift.NewTMemoryBufferLen(len(arg1147))
    defer mbTrans1148.Close()
    _, err1149 := mbTrans1148.WriteString(arg1147)
    if err1149 != nil {
      Usage()
      return
    }
    factory1150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1151 := factory1150.GetProtocol(mbTrans1148)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err1152 := argvalue1.Read(jsProt1151)
    if err1152 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg1153 := flag.Arg(1)
    mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
    defer mbTrans1154.Close()
    _, err1155 := mbTrans1154.WriteString(arg1153)
    if err1155 != nil { 
      Usage()
      return
    }
    factory1156 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1157 := factory1156.GetProtocol(mbTrans1154)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err1158 := containerStruct0.ReadField1(jsProt1157)
    if err1158 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(value0))
    fmt.Print("\n")
    break
  case "add_partitions_pspec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
      flag.Usage()
    }
    arg1159 := flag.Arg(1)
    mbTrans1160 := thrift.NewTMemoryBufferLen(len(arg1159))
    defer mbTrans1160.Close()
    _, err1161 := mbTrans1160.WriteString(arg1159)
    if err1161 != nil { 
      Usage()
      return
    }
    factory1162 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1163 := factory1162.GetProtocol(mbTrans1160)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
    err1164 := containerStruct0.ReadField1(jsProt1163)
    if err1164 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitionsPspec(value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1167 := flag.Arg(3)
    mbTrans1168 := thrift.NewTMemoryBufferLen(len(arg1167))
    defer mbTrans1168.Close()
    _, err1169 := mbTrans1168.WriteString(arg1167)
    if err1169 != nil { 
      Usage()
      return
    }
    factory1170 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1171 := factory1170.GetProtocol(mbTrans1168)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err1172 := containerStruct2.ReadField3(jsProt1171)
    if err1172 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1173 := flag.Arg(1)
    mbTrans1174 := thrift.NewTMemoryBufferLen(len(arg1173))
    defer mbTrans1174.Close()
    _, err1175 := mbTrans1174.WriteString(arg1173)
    if err1175 != nil {
      Usage()
      return
    }
    factory1176 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1177 := factory1176.GetProtocol(mbTrans1174)
    argvalue0 := hive_metastore.NewAddPartitionsRequest()
    err1178 := argvalue0.Read(jsProt1177)
    if err1178 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartitionsReq(value0))
    fmt.Print("\n")
    break
  case "append_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1181 := flag.Arg(3)
    mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
    defer mbTrans1182.Close()
    _, err1183 := mbTrans1182.WriteString(arg1181)
    if err1183 != nil { 
      Usage()
      return
    }
    factory1184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1185 := factory1184.GetProtocol(mbTrans1182)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
    err1186 := containerStruct2.ReadField3(jsProt1185)
    if err1186 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1187 := flag.Arg(4)
    mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
    defer mbTrans1188.Close()
    _, err1189 := mbTrans1188.WriteString(arg1187)
    if err1189 != nil {
      Usage()
      return
    }
    factory1190 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1191 := factory1190.GetProtocol(mbTrans1188)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1192 := argvalue3.Read(jsProt1191)
    if err1192 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1199 := flag.Arg(4)
    mbTrans1200 := thrift.NewTMemoryBufferLen(len(arg1199))
    defer mbTrans1200.Close()
    _, err1201 := mbTrans1200.WriteString(arg1199)
    if err1201 != nil {
      Usage()
      return
    }
    factory1202 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1203 := factory1202.GetProtocol(mbTrans1200)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1204 := argvalue3.Read(jsProt1203)
    if err1204 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1207 := flag.Arg(3)
    mbTrans1208 := thrift.NewTMemoryBufferLen(len(arg1207))
    defer mbTrans1208.Close()
    _, err1209 := mbTrans1208.WriteString(arg1207)
    if err1209 != nil { 
      Usage()
      return
    }
    factory1210 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1211 := factory1210.GetProtocol(mbTrans1208)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err1212 := containerStruct2.ReadField3(jsProt1211)
    if err1212 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1216 := flag.Arg(3)
    mbTrans1217 := thrift.NewTMemoryBufferLen(len(arg1216))
    defer mbTrans1217.Close()
    _, err1218 := mbTrans1217.WriteString(arg1216)
    if err1218 != nil { 
      Usage()
      return
    }
    factory1219 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1220 := factory1219.GetProtocol(mbTrans1217)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
    err1221 := containerStruct2.ReadField3(jsProt1220)
    if err1221 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1223 := flag.Arg(5)
    mbTrans1224 := thrift.NewTMemoryBufferLen(len(arg1223))
    defer mbTrans1224.Close()
    _, err1225 := mbTrans1224.WriteString(arg1223)
    if err1225 != nil {
      Usage()
      return
    }
    factory1226 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1227 := factory1226.GetProtocol(mbTrans1224)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1228 := argvalue4.Read(jsProt1227)
    if err1228 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionWithEnvironmentContext(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1237 := flag.Arg(5)
    mbTrans1238 := thrift.NewTMemoryBufferLen(len(arg1237))
    defer mbTrans1238.Close()
    _, err1239 := mbTrans1238.WriteString(arg1237)
    if err1239 != nil {
      Usage()
      return
    }
    factory1240 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1241 := factory1240.GetProtocol(mbTrans1238)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1242 := argvalue4.Read(jsProt1241)
    if err1242 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionByNameWithEnvironmentContext(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1243 := flag.Arg(1)
    mbTrans1244 := thrift.NewTMemoryBufferLen(len(arg1243))
    defer mbTrans1244.Close()
    _, err1245 := mbTrans1244.WriteString(arg1243)
    if err1245 != nil {
      Usage()
      return
    }
    factory1246 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1247 := factory1246.GetProtocol(mbTrans1244)
    argvalue0 := hive_metastore.NewDropPartitionsRequest()
    err1248 := argvalue0.Read(jsProt1247)
    if err1248 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropPartitionsReq(value0))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1251 := flag.Arg(3)
    mbTrans1252 := thrift.NewTMemoryBufferLen(len(arg1251))
    defer mbTrans1252.Close()
    _, err1253 := mbTrans1252.WriteString(arg1251)
    if err1253 != nil { 
      Usage()
      return
    }
    factory1254 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1255 := factory1254.GetProtocol(mbTrans1252)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err1256 := containerStruct2.ReadField3(jsProt1255)
    if err1256 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionReq requires 1 args")
      flag.Usage()
    }
    arg1257 := flag.Arg(1)
    mbTrans1258 := thrift.NewTMemoryBufferLen(len(arg1257))
    defer mbTrans1258.Close()
    _, err1259 := mbTrans1258.WriteString(arg1257)
    if err1259 != nil {
      Usage()
      return
    }
    factory1260 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1261 := factory1260.GetProtocol(mbTrans1258)
    argvalue0 := hive_metastore.NewGetPartitionRequest()
    err1262 := argvalue0.Read(jsProt1261)
    if err1262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionReq(value0))
    fmt.Print("\n")
    break
  case "exchange_partition":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
      flag.Usage()
    }
    arg1263 := flag.Arg(1)
    mbTrans1264 := thrift.NewTMemoryBufferLen(len(arg1263))
    defer mbTrans1264.Close()
    _, err1265 := mbTrans1264.WriteString(arg1263)
    if err1265 != nil { 
      Usage()
      return
    }
    factory1266 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1267 := factory1266.GetProtocol(mbTrans1264)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
    err1268 := containerStruct0.ReadField1(jsProt1267)
    if err1268 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartition(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "exchange_partitions":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
      flag.Usage()
    }
    arg1273 := flag.Arg(1)
    mbTrans1274 := thrift.NewTMemoryBufferLen(len(arg1273))
    defer mbTrans1274.Close()
    _, err1275 := mbTrans1274.WriteString(arg1273)
    if err1275 != nil { 
      Usage()
      return
    }
    factory1276 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1277 := factory1276.GetProtocol(mbTrans1274)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
    err1278 := containerStruct0.ReadField1(jsProt1277)
    if err1278 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartitions(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1285 := flag.Arg(3)
    mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
    defer mbTrans1286.Close()
    _, err1287 := mbTrans1286.WriteString(arg1285)
    if err1287 != nil { 
      Usage()
      return
    }
    factory1288 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1289 := factory1288.GetProtocol(mbTrans1286)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1290 := containerStruct2.ReadField3(jsProt1289)
    if err1290 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1292 := flag.Arg(5)
    mbTrans1293 := thrift.NewTMemoryBufferLen(len(arg1292))
    defer mbTrans1293.Close()
    _, err1294 := mbTrans1293.WriteString(arg1292)
    if err1294 != nil { 
      Usage()
      return
    }
    factory1295 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1296 := factory1295.GetProtocol(mbTrans1293)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1297 := containerStruct4.ReadField5(jsProt1296)
    if err1297 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1303 := (strconv.Atoi(flag.Arg(3)))
    if err1303 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1304 := flag.Arg(1)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue0 := hive_metastore.NewPartitionsRequest()
    err1309 := argvalue0.Read(jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsReq(value0))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1312 := (strconv.Atoi(flag.Arg(3)))
    if err1312 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1314 := flag.Arg(5)
    mbTrans1315 := thrift.NewTMemoryBufferLen(len(arg1314))
    defer mbTrans1315.Close()
    _, err1316 := mbTrans1315.WriteString(arg1314)
    if err1316 != nil { 
      Usage()
      return
    }
    factory1317 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1318 := factory1317.GetProtocol(mbTrans1315)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err1319 := containerStruct4.ReadField5(jsProt1318)
    if err1319 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partitions_pspec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1322 := (strconv.Atoi(flag.Arg(3)))
    if err1322 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionsPspec(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1325 := (strconv.Atoi(flag.Arg(3)))
    if err1325 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_values":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
      flag.Usage()
    }
    arg1326 := flag.Arg(1)
    mbTrans1327 := thrift.NewTMemoryBufferLen(len(arg1326))
    defer mbTrans1327.Close()
    _, err1328 := mbTrans1327.WriteString(arg1326)
    if err1328 != nil {
      Usage()
      return
    }
    factory1329 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1330 := factory1329.GetProtocol(mbTrans1327)
    argvalue0 := hive_metastore.NewPartitionValuesRequest()
    err1331 := argvalue0.Read(jsProt1330)
    if err1331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionValues(value0))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1334 := flag.Arg(3)
    mbTrans1335 := thrift.NewTMemoryBufferLen(len(arg1334))
    defer mbTrans1335.Close()
    _, err1336 := mbTrans1335.WriteString(arg1334)
    if err1336 != nil { 
      Usage()
      return
    }
    factory1337 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1338 := factory1337.GetProtocol(mbTrans1335)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err1339 := containerStruct2.ReadField3(jsProt1338)
    if err1339 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1340 := (strconv.Atoi(flag.Arg(4)))
    if err1340 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1343 := flag.Arg(3)
    mbTrans1344 := thrift.NewTMemoryBufferLen(len(arg1343))
    defer mbTrans1344.Close()
    _, err1345 := mbTrans1344.WriteString(arg1343)
    if err1345 != nil { 
      Usage()
      return
    }
    factory1346 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1347 := factory1346.GetProtocol(mbTrans1344)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1348 := containerStruct2.ReadField3(jsProt1347)
    if err1348 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1349 := (strconv.Atoi(flag.Arg(4)))
    if err1349 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg1351 := flag.Arg(6)
    mbTrans1352 := thrift.NewTMemoryBufferLen(len(arg1351))
    defer mbTrans1352.Close()
    _, err1353 := mbTrans1352.WriteString(arg1351)
    if err1353 != nil { 
      Usage()
      return
    }
    factory1354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1355 := factory1354.GetProtocol(mbTrans1352)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1356 := containerStruct5.ReadField6(jsProt1355)
    if err1356 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuthReq requires 1 args")
      flag.Usage()
    }
    arg1357 := flag.Arg(1)
    mbTrans1358 := thrift.NewTMemoryBufferLen(len(arg1357))
    defer mbTrans1358.Close()
    _, err1359 := mbTrans1358.WriteString(arg1357)
    if err1359 != nil {
      Usage()
      return
    }
    factory1360 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1361 := factory1360.GetProtocol(mbTrans1358)
    argvalue0 := hive_metastore.NewGetPartitionsPsWithAuthRequest()
    err1362 := argvalue0.Read(jsProt1361)
    if err1362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsPsWithAuthReq(value0))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1365 := flag.Arg(3)
    mbTrans1366 := thrift.NewTMemoryBufferLen(len(arg1365))
    defer mbTrans1366.Close()
    _, err1367 := mbTrans1366.WriteString(arg1365)
    if err1367 != nil { 
      Usage()
      return
    }
    factory1368 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1369 := factory1368.GetProtocol(mbTrans1366)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err1370 := containerStruct2.ReadField3(jsProt1369)
    if err1370 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1371 := (strconv.Atoi(flag.Arg(4)))
    if err1371 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partition_names_ps_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPsReq requires 1 args")
      flag.Usage()
    }
    arg1372 := flag.Arg(1)
    mbTrans1373 := thrift.NewTMemoryBufferLen(len(arg1372))
    defer mbTrans1373.Close()
    _, err1374 := mbTrans1373.WriteString(arg1372)
    if err1374 != nil {
      Usage()
      return
    }
    factory1375 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1376 := factory1375.GetProtocol(mbTrans1373)
    argvalue0 := hive_metastore.NewGetPartitionNamesPsRequest()
    err1377 := argvalue0.Read(jsProt1376)
    if err1377 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionNamesPsReq(value0))
    fmt.Print("\n")
    break
  case "get_partition_names_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesReq requires 1 args")
      flag.Usage()
    }
    arg1378 := flag.Arg(1)
    mbTrans1379 := thrift.NewTMemoryBufferLen(len(arg1378))
    defer mbTrans1379.Close()
    _, err1380 := mbTrans1379.WriteString(arg1378)
    if err1380 != nil {
      Usage()
      return
    }
    factory1381 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1382 := factory1381.GetProtocol(mbTrans1379)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1383 := argvalue0.Read(jsProt1382)
    if err1383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionNamesReq(value0))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1387 := (strconv.Atoi(flag.Arg(4)))
    if err1387 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_part_specs_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1391 := (strconv.Atoi(flag.Arg(4)))
    if err1391 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartSpecsByFilter(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
      flag.Usage()
    }
    arg1392 := flag.Arg(1)
    mbTrans1393 := thrift.NewTMemoryBufferLen(len(arg1392))
    defer mbTrans1393.Close()
    _, err1394 := mbTrans1393.WriteString(arg1392)
    if err1394 != nil {
      Usage()
      return
    }
    factory1395 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1396 := factory1395.GetProtocol(mbTrans1393)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1397 := argvalue0.Read(jsProt1396)
    if err1397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsByExpr(value0))
    fmt.Print("\n")
    break
  case "get_partitions_spec_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsSpecByExpr requires 1 args")
      flag.Usage()
    }
    arg1398 := flag.Arg(1)
    mbTrans1399 := thrift.NewTMemoryBufferLen(len(arg1398))
    defer mbTrans1399.Close()
    _, err1400 := mbTrans1399.WriteString(arg1398)
    if err1400 != nil {
      Usage()
      return
    }
    factory1401 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1402 := factory1401.GetProtocol(mbTrans1399)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1403 := argvalue0.Read(jsProt1402)
    if err1403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsSpecByExpr(value0))
    fmt.Print("\n")
    break
  case "get_num_partitions_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNumPartitionsByFilter(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1409 := flag.Arg(3)
    mbTrans1410 := thrift.NewTMemoryBufferLen(len(arg1409))
    defer mbTrans1410.Close()
    _, err1411 := mbTrans1410.WriteString(arg1409)
    if err1411 != nil { 
      Usage()
      return
    }
    factory1412 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1413 := factory1412.GetProtocol(mbTrans1410)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err1414 := containerStruct2.ReadField3(jsProt1413)
    if err1414 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_by_names_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNamesReq requires 1 args")
      flag.Usage()
    }
    arg1415 := flag.Arg(1)
    mbTrans1416 := thrift.NewTMemoryBufferLen(len(arg1415))
    defer mbTrans1416.Close()
    _, err1417 := mbTrans1416.WriteString(arg1415)
    if err1417 != nil {
      Usage()
      return
    }
    factory1418 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1419 := factory1418.GetProtocol(mbTrans1416)
    argvalue0 := hive_metastore.NewGetPartitionsByNamesRequest()
    err1420 := argvalue0.Read(jsProt1419)
    if err1420 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsByNamesReq(value0))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1423 := flag.Arg(3)
    mbTrans1424 := thrift.NewTMemoryBufferLen(len(arg1423))
    defer mbTrans1424.Close()
    _, err1425 := mbTrans1424.WriteString(arg1423)
    if err1425 != nil {
      Usage()
      return
    }
    factory1426 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1427 := factory1426.GetProtocol(mbTrans1424)
    argvalue2 := hive_metastore.NewPartition()
    err1428 := argvalue2.Read(jsProt1427)
    if err1428 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1431 := flag.Arg(3)
    mbTrans1432 := thrift.NewTMemoryBufferLen(len(arg1431))
    defer mbTrans1432.Close()
    _, err1433 := mbTrans1432.WriteString(arg1431)
    if err1433 != nil { 
      Usage()
      return
    }
    factory1434 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1435 := factory1434.GetProtocol(mbTrans1432)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err1436 := containerStruct2.ReadField3(jsProt1435)
    if err1436 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1439 := flag.Arg(3)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil { 
      Usage()
      return
    }
    factory1442 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
    err1444 := containerStruct2.ReadField3(jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    arg1445 := flag.Arg(4)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil {
      Usage()
      return
    }
    factory1448 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1450 := argvalue3.Read(jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionsWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1451 := flag.Arg(1)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil {
      Usage()
      return
    }
    factory1454 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    argvalue0 := hive_metastore.NewAlterPartitionsRequest()
    err1456 := argvalue0.Read(jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterPartitionsReq(value0))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1459 := flag.Arg(3)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil {
      Usage()
      return
    }
    factory1462 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    argvalue2 := hive_metastore.NewPartition()
    err1464 := argvalue2.Read(jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1465 := flag.Arg(4)
    mbTrans1466 := thrift.NewTMemoryBufferLen(len(arg1465))
    defer mbTrans1466.Close()
    _, err1467 := mbTrans1466.WriteString(arg1465)
    if err1467 != nil {
      Usage()
      return
    }
    factory1468 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1469 := factory1468.GetProtocol(mbTrans1466)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1470 := argvalue3.Read(jsProt1469)
    if err1470 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1473 := flag.Arg(3)
    mbTrans1474 := thrift.NewTMemoryBufferLen(len(arg1473))
    defer mbTrans1474.Close()
    _, err1475 := mbTrans1474.WriteString(arg1473)
    if err1475 != nil { 
      Usage()
      return
    }
    factory1476 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1477 := factory1476.GetProtocol(mbTrans1474)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err1478 := containerStruct2.ReadField3(jsProt1477)
    if err1478 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1479 := flag.Arg(4)
    mbTrans1480 := thrift.NewTMemoryBufferLen(len(arg1479))
    defer mbTrans1480.Close()
    _, err1481 := mbTrans1480.WriteString(arg1479)
    if err1481 != nil {
      Usage()
      return
    }
    factory1482 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1483 := factory1482.GetProtocol(mbTrans1480)
    argvalue3 := hive_metastore.NewPartition()
    err1484 := argvalue3.Read(jsProt1483)
    if err1484 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenamePartitionReq requires 1 args")
      flag.Usage()
    }
    arg1485 := flag.Arg(1)
    mbTrans1486 := thrift.NewTMemoryBufferLen(len(arg1485))
    defer mbTrans1486.Close()
    _, err1487 := mbTrans1486.WriteString(arg1485)
    if err1487 != nil {
      Usage()
      return
    }
    factory1488 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1489 := factory1488.GetProtocol(mbTrans1486)
    argvalue0 := hive_metastore.NewRenamePartitionRequest()
    err1490 := argvalue0.Read(jsProt1489)
    if err1490 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RenamePartitionReq(value0))
    fmt.Print("\n")
    break
  case "partition_name_has_valid_characters":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
      flag.Usage()
    }
    arg1491 := flag.Arg(1)
    mbTrans1492 := thrift.NewTMemoryBufferLen(len(arg1491))
    defer mbTrans1492.Close()
    _, err1493 := mbTrans1492.WriteString(arg1491)
    if err1493 != nil { 
      Usage()
      return
    }
    factory1494 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1495 := factory1494.GetProtocol(mbTrans1492)
    containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
    err1496 := containerStruct0.ReadField1(jsProt1495)
    if err1496 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartVals
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.PartitionNameHasValidCharacters(value0, value1))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1504 := flag.Arg(3)
    mbTrans1505 := thrift.NewTMemoryBufferLen(len(arg1504))
    defer mbTrans1505.Close()
    _, err1506 := mbTrans1505.WriteString(arg1504)
    if err1506 != nil { 
      Usage()
      return
    }
    factory1507 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1508 := factory1507.GetProtocol(mbTrans1505)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err1509 := containerStruct2.ReadField3(jsProt1508)
    if err1509 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1512 := flag.Arg(3)
    mbTrans1513 := thrift.NewTMemoryBufferLen(len(arg1512))
    defer mbTrans1513.Close()
    _, err1514 := mbTrans1513.WriteString(arg1512)
    if err1514 != nil { 
      Usage()
      return
    }
    factory1515 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1516 := factory1515.GetProtocol(mbTrans1513)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err1517 := containerStruct2.ReadField3(jsProt1516)
    if err1517 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_primary_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
      flag.Usage()
    }
    arg1518 := flag.Arg(1)
    mbTrans1519 := thrift.NewTMemoryBufferLen(len(arg1518))
    defer mbTrans1519.Close()
    _, err1520 := mbTrans1519.WriteString(arg1518)
    if err1520 != nil {
      Usage()
      return
    }
    factory1521 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1522 := factory1521.GetProtocol(mbTrans1519)
    argvalue0 := hive_metastore.NewPrimaryKeysRequest()
    err1523 := argvalue0.Read(jsProt1522)
    if err1523 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrimaryKeys(value0))
    fmt.Print("\n")
    break
  case "get_foreign_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
      flag.Usage()
    }
    arg1524 := flag.Arg(1)
    mbTrans1525 := thrift.NewTMemoryBufferLen(len(arg1524))
    defer mbTrans1525.Close()
    _, err1526 := mbTrans1525.WriteString(arg1524)
    if err1526 != nil {
      Usage()
      return
    }
    factory1527 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1528 := factory1527.GetProtocol(mbTrans1525)
    argvalue0 := hive_metastore.NewForeignKeysRequest()
    err1529 := argvalue0.Read(jsProt1528)
    if err1529 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetForeignKeys(value0))
    fmt.Print("\n")
    break
  case "get_unique_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
      flag.Usage()
    }
    arg1530 := flag.Arg(1)
    mbTrans1531 := thrift.NewTMemoryBufferLen(len(arg1530))
    defer mbTrans1531.Close()
    _, err1532 := mbTrans1531.WriteString(arg1530)
    if err1532 != nil {
      Usage()
      return
    }
    factory1533 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1534 := factory1533.GetProtocol(mbTrans1531)
    argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
    err1535 := argvalue0.Read(jsProt1534)
    if err1535 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUniqueConstraints(value0))
    fmt.Print("\n")
    break
  case "get_not_null_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
      flag.Usage()
    }
    arg1536 := flag.Arg(1)
    mbTrans1537 := thrift.NewTMemoryBufferLen(len(arg1536))
    defer mbTrans1537.Close()
    _, err1538 := mbTrans1537.WriteString(arg1536)
    if err1538 != nil {
      Usage()
      return
    }
    factory1539 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1540 := factory1539.GetProtocol(mbTrans1537)
    argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
    err1541 := argvalue0.Read(jsProt1540)
    if err1541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotNullConstraints(value0))
    fmt.Print("\n")
    break
  case "get_default_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDefaultConstraints requires 1 args")
      flag.Usage()
    }
    arg1542 := flag.Arg(1)
    mbTrans1543 := thrift.NewTMemoryBufferLen(len(arg1542))
    defer mbTrans1543.Close()
    _, err1544 := mbTrans1543.WriteString(arg1542)
    if err1544 != nil {
      Usage()
      return
    }
    factory1545 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1546 := factory1545.GetProtocol(mbTrans1543)
    argvalue0 := hive_metastore.NewDefaultConstraintsRequest()
    err1547 := argvalue0.Read(jsProt1546)
    if err1547 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDefaultConstraints(value0))
    fmt.Print("\n")
    break
  case "get_check_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCheckConstraints requires 1 args")
      flag.Usage()
    }
    arg1548 := flag.Arg(1)
    mbTrans1549 := thrift.NewTMemoryBufferLen(len(arg1548))
    defer mbTrans1549.Close()
    _, err1550 := mbTrans1549.WriteString(arg1548)
    if err1550 != nil {
      Usage()
      return
    }
    factory1551 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1552 := factory1551.GetProtocol(mbTrans1549)
    argvalue0 := hive_metastore.NewCheckConstraintsRequest()
    err1553 := argvalue0.Read(jsProt1552)
    if err1553 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCheckConstraints(value0))
    fmt.Print("\n")
    break
  case "get_all_table_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTableConstraints requires 1 args")
      flag.Usage()
    }
    arg1554 := flag.Arg(1)
    mbTrans1555 := thrift.NewTMemoryBufferLen(len(arg1554))
    defer mbTrans1555.Close()
    _, err1556 := mbTrans1555.WriteString(arg1554)
    if err1556 != nil {
      Usage()
      return
    }
    factory1557 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1558 := factory1557.GetProtocol(mbTrans1555)
    argvalue0 := hive_metastore.NewAllTableConstraintsRequest()
    err1559 := argvalue0.Read(jsProt1558)
    if err1559 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllTableConstraints(value0))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1560 := flag.Arg(1)
    mbTrans1561 := thrift.NewTMemoryBufferLen(len(arg1560))
    defer mbTrans1561.Close()
    _, err1562 := mbTrans1561.WriteString(arg1560)
    if err1562 != nil {
      Usage()
      return
    }
    factory1563 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1564 := factory1563.GetProtocol(mbTrans1561)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1565 := argvalue0.Read(jsProt1564)
    if err1565 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1566 := flag.Arg(1)
    mbTrans1567 := thrift.NewTMemoryBufferLen(len(arg1566))
    defer mbTrans1567.Close()
    _, err1568 := mbTrans1567.WriteString(arg1566)
    if err1568 != nil {
      Usage()
      return
    }
    factory1569 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1570 := factory1569.GetProtocol(mbTrans1567)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1571 := argvalue0.Read(jsProt1570)
    if err1571 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(value0))
    fmt.Print("\n")
    break
  case "update_table_column_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1572 := flag.Arg(1)
    mbTrans1573 := thrift.NewTMemoryBufferLen(len(arg1572))
    defer mbTrans1573.Close()
    _, err1574 := mbTrans1573.WriteString(arg1572)
    if err1574 != nil {
      Usage()
      return
    }
    factory1575 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1576 := factory1575.GetProtocol(mbTrans1573)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err1577 := argvalue0.Read(jsProt1576)
    if err1577 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatisticsReq(value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1578 := flag.Arg(1)
    mbTrans1579 := thrift.NewTMemoryBufferLen(len(arg1578))
    defer mbTrans1579.Close()
    _, err1580 := mbTrans1579.WriteString(arg1578)
    if err1580 != nil {
      Usage()
      return
    }
    factory1581 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1582 := factory1581.GetProtocol(mbTrans1579)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err1583 := argvalue0.Read(jsProt1582)
    if err1583 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatisticsReq(value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1591 := flag.Arg(1)
    mbTrans1592 := thrift.NewTMemoryBufferLen(len(arg1591))
    defer mbTrans1592.Close()
    _, err1593 := mbTrans1592.WriteString(arg1591)
    if err1593 != nil {
      Usage()
      return
    }
    factory1594 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1595 := factory1594.GetProtocol(mbTrans1592)
    argvalue0 := hive_metastore.NewTableStatsRequest()
    err1596 := argvalue0.Read(jsProt1595)
    if err1596 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableStatisticsReq(value0))
    fmt.Print("\n")
    break
  case "get_partitions_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1597 := flag.Arg(1)
    mbTrans1598 := thrift.NewTMemoryBufferLen(len(arg1597))
    defer mbTrans1598.Close()
    _, err1599 := mbTrans1598.WriteString(arg1597)
    if err1599 != nil {
      Usage()
      return
    }
    factory1600 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1601 := factory1600.GetProtocol(mbTrans1598)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1602 := argvalue0.Read(jsProt1601)
    if err1602 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsStatisticsReq(value0))
    fmt.Print("\n")
    break
  case "get_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1603 := flag.Arg(1)
    mbTrans1604 := thrift.NewTMemoryBufferLen(len(arg1603))
    defer mbTrans1604.Close()
    _, err1605 := mbTrans1604.WriteString(arg1603)
    if err1605 != nil {
      Usage()
      return
    }
    factory1606 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1607 := factory1606.GetProtocol(mbTrans1604)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1608 := argvalue0.Read(jsProt1607)
    if err1608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrStatsFor(value0))
    fmt.Print("\n")
    break
  case "set_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1609 := flag.Arg(1)
    mbTrans1610 := thrift.NewTMemoryBufferLen(len(arg1609))
    defer mbTrans1610.Close()
    _, err1611 := mbTrans1610.WriteString(arg1609)
    if err1611 != nil {
      Usage()
      return
    }
    factory1612 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1613 := factory1612.GetProtocol(mbTrans1610)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err1614 := argvalue0.Read(jsProt1613)
    if err1614 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetAggrStatsFor(value0))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.DeletePartitionColumnStatistics(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeleteTableColumnStatistics(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "create_function":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
      flag.Usage()
    }
    arg1624 := flag.Arg(1)
    mbTrans1625 := thrift.NewTMemoryBufferLen(len(arg1624))
    defer mbTrans1625.Close()
    _, err1626 := mbTrans1625.WriteString(arg1624)
    if err1626 != nil {
      Usage()
      return
    }
    factory1627 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1628 := factory1627.GetProtocol(mbTrans1625)
    argvalue0 := hive_metastore.NewFunction()
    err1629 := argvalue0.Read(jsProt1628)
    if err1629 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateFunction(value0))
    fmt.Print("\n")
    break
  case "drop_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DropFunction(value0, value1))
    fmt.Print("\n")
    break
  case "alter_function":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1634 := flag.Arg(3)
    mbTrans1635 := thrift.NewTMemoryBufferLen(len(arg1634))
    defer mbTrans1635.Close()
    _, err1636 := mbTrans1635.WriteString(arg1634)
    if err1636 != nil {
      Usage()
      return
    }
    factory1637 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1638 := factory1637.GetProtocol(mbTrans1635)
    argvalue2 := hive_metastore.NewFunction()
    err1639 := argvalue2.Read(jsProt1638)
    if err1639 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterFunction(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_functions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunctions(value0, value1))
    fmt.Print("\n")
    break
  case "get_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunction(value0, value1))
    fmt.Print("\n")
    break
  case "get_all_functions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllFunctions())
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg1644 := flag.Arg(1)
    mbTrans1645 := thrift.NewTMemoryBufferLen(len(arg1644))
    defer mbTrans1645.Close()
    _, err1646 := mbTrans1645.WriteString(arg1644)
    if err1646 != nil {
      Usage()
      return
    }
    factory1647 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1648 := factory1647.GetProtocol(mbTrans1645)
    argvalue0 := hive_metastore.NewRole()
    err1649 := argvalue0.Read(jsProt1648)
    if err1649 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames())
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(value0, value1))
    fmt.Print("\n")
    break
  case "grant_revoke_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
      flag.Usage()
    }
    arg1658 := flag.Arg(1)
    mbTrans1659 := thrift.NewTMemoryBufferLen(len(arg1658))
    defer mbTrans1659.Close()
    _, err1660 := mbTrans1659.WriteString(arg1658)
    if err1660 != nil {
      Usage()
      return
    }
    factory1661 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1662 := factory1661.GetProtocol(mbTrans1659)
    argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
    err1663 := argvalue0.Read(jsProt1662)
    if err1663 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokeRole(value0))
    fmt.Print("\n")
    break
  case "get_principals_in_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
      flag.Usage()
    }
    arg1664 := flag.Arg(1)
    mbTrans1665 := thrift.NewTMemoryBufferLen(len(arg1664))
    defer mbTrans1665.Close()
    _, err1666 := mbTrans1665.WriteString(arg1664)
    if err1666 != nil {
      Usage()
      return
    }
    factory1667 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1668 := factory1667.GetProtocol(mbTrans1665)
    argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
    err1669 := argvalue0.Read(jsProt1668)
    if err1669 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrincipalsInRole(value0))
    fmt.Print("\n")
    break
  case "get_role_grants_for_principal":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
      flag.Usage()
    }
    arg1670 := flag.Arg(1)
    mbTrans1671 := thrift.NewTMemoryBufferLen(len(arg1670))
    defer mbTrans1671.Close()
    _, err1672 := mbTrans1671.WriteString(arg1670)
    if err1672 != nil {
      Usage()
      return
    }
    factory1673 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1674 := factory1673.GetProtocol(mbTrans1671)
    argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
    err1675 := argvalue0.Read(jsProt1674)
    if err1675 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRoleGrantsForPrincipal(value0))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg1676 := flag.Arg(1)
    mbTrans1677 := thrift.NewTMemoryBufferLen(len(arg1676))
    defer mbTrans1677.Close()
    _, err1678 := mbTrans1677.WriteString(arg1676)
    if err1678 != nil {
      Usage()
      return
    }
    factory1679 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1680 := factory1679.GetProtocol(mbTrans1677)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err1681 := argvalue0.Read(jsProt1680)
    if err1681 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1683 := flag.Arg(3)
    mbTrans1684 := thrift.NewTMemoryBufferLen(len(arg1683))
    defer mbTrans1684.Close()
    _, err1685 := mbTrans1684.WriteString(arg1683)
    if err1685 != nil { 
      Usage()
      return
    }
    factory1686 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1687 := factory1686.GetProtocol(mbTrans1684)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err1688 := containerStruct2.ReadField3(jsProt1687)
    if err1688 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg1690 := flag.Arg(3)
    mbTrans1691 := thrift.NewTMemoryBufferLen(len(arg1690))
    defer mbTrans1691.Close()
    _, err1692 := mbTrans1691.WriteString(arg1690)
    if err1692 != nil {
      Usage()
      return
    }
    factory1693 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1694 := factory1693.GetProtocol(mbTrans1691)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err1695 := argvalue2.Read(jsProt1694)
    if err1695 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg1696 := flag.Arg(1)
    mbTrans1697 := thrift.NewTMemoryBufferLen(len(arg1696))
    defer mbTrans1697.Close()
    _, err1698 := mbTrans1697.WriteString(arg1696)
    if err1698 != nil {
      Usage()
      return
    }
    factory1699 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1700 := factory1699.GetProtocol(mbTrans1697)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1701 := argvalue0.Read(jsProt1700)
    if err1701 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1702 := flag.Arg(1)
    mbTrans1703 := thrift.NewTMemoryBufferLen(len(arg1702))
    defer mbTrans1703.Close()
    _, err1704 := mbTrans1703.WriteString(arg1702)
    if err1704 != nil {
      Usage()
      return
    }
    factory1705 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1706 := factory1705.GetProtocol(mbTrans1703)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1707 := argvalue0.Read(jsProt1706)
    if err1707 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(value0))
    fmt.Print("\n")
    break
  case "grant_revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1708 := flag.Arg(1)
    mbTrans1709 := thrift.NewTMemoryBufferLen(len(arg1708))
    defer mbTrans1709.Close()
    _, err1710 := mbTrans1709.WriteString(arg1708)
    if err1710 != nil {
      Usage()
      return
    }
    factory1711 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1712 := factory1711.GetProtocol(mbTrans1709)
    argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err1713 := argvalue0.Read(jsProt1712)
    if err1713 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokePrivileges(value0))
    fmt.Print("\n")
    break
  case "refresh_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RefreshPrivileges requires 3 args")
      flag.Usage()
    }
    arg1714 := flag.Arg(1)
    mbTrans1715 := thrift.NewTMemoryBufferLen(len(arg1714))
    defer mbTrans1715.Close()
    _, err1716 := mbTrans1715.WriteString(arg1714)
    if err1716 != nil {
      Usage()
      return
    }
    factory1717 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1718 := factory1717.GetProtocol(mbTrans1715)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err1719 := argvalue0.Read(jsProt1718)
    if err1719 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1721 := flag.Arg(3)
    mbTrans1722 := thrift.NewTMemoryBufferLen(len(arg1721))
    defer mbTrans1722.Close()
    _, err1723 := mbTrans1722.WriteString(arg1721)
    if err1723 != nil {
      Usage()
      return
    }
    factory1724 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1725 := factory1724.GetProtocol(mbTrans1722)
    argvalue2 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err1726 := argvalue2.Read(jsProt1725)
    if err1726 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RefreshPrivileges(value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1728 := flag.Arg(2)
    mbTrans1729 := thrift.NewTMemoryBufferLen(len(arg1728))
    defer mbTrans1729.Close()
    _, err1730 := mbTrans1729.WriteString(arg1728)
    if err1730 != nil { 
      Usage()
      return
    }
    factory1731 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1732 := factory1731.GetProtocol(mbTrans1729)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err1733 := containerStruct1.ReadField2(jsProt1732)
    if err1733 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(value0))
    fmt.Print("\n")
    break
  case "add_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddToken(value0, value1))
    fmt.Print("\n")
    break
  case "remove_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveToken(value0))
    fmt.Print("\n")
    break
  case "get_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetToken(value0))
    fmt.Print("\n")
    break
  case "get_all_token_identifiers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllTokenIdentifiers())
    fmt.Print("\n")
    break
  case "add_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddMasterKey(value0))
    fmt.Print("\n")
    break
  case "update_master_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
      flag.Usage()
    }
    tmp0, err1743 := (strconv.Atoi(flag.Arg(1)))
    if err1743 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateMasterKey(value0, value1))
    fmt.Print("\n")
    break
  case "remove_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
      flag.Usage()
    }
    tmp0, err1745 := (strconv.Atoi(flag.Arg(1)))
    if err1745 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveMasterKey(value0))
    fmt.Print("\n")
    break
  case "get_master_keys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMasterKeys())
    fmt.Print("\n")
    break
  case "get_open_txns":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxns())
    fmt.Print("\n")
    break
  case "get_open_txns_info":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxnsInfo())
    fmt.Print("\n")
    break
  case "open_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
      flag.Usage()
    }
    arg1746 := flag.Arg(1)
    mbTrans1747 := thrift.NewTMemoryBufferLen(len(arg1746))
    defer mbTrans1747.Close()
    _, err1748 := mbTrans1747.WriteString(arg1746)
    if err1748 != nil {
      Usage()
      return
    }
    factory1749 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1750 := factory1749.GetProtocol(mbTrans1747)
    argvalue0 := hive_metastore.NewOpenTxnRequest()
    err1751 := argvalue0.Read(jsProt1750)
    if err1751 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenTxns(value0))
    fmt.Print("\n")
    break
  case "abort_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
      flag.Usage()
    }
    arg1752 := flag.Arg(1)
    mbTrans1753 := thrift.NewTMemoryBufferLen(len(arg1752))
    defer mbTrans1753.Close()
    _, err1754 := mbTrans1753.WriteString(arg1752)
    if err1754 != nil {
      Usage()
      return
    }
    factory1755 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1756 := factory1755.GetProtocol(mbTrans1753)
    argvalue0 := hive_metastore.NewAbortTxnRequest()
    err1757 := argvalue0.Read(jsProt1756)
    if err1757 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxn(value0))
    fmt.Print("\n")
    break
  case "abort_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
      flag.Usage()
    }
    arg1758 := flag.Arg(1)
    mbTrans1759 := thrift.NewTMemoryBufferLen(len(arg1758))
    defer mbTrans1759.Close()
    _, err1760 := mbTrans1759.WriteString(arg1758)
    if err1760 != nil {
      Usage()
      return
    }
    factory1761 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1762 := factory1761.GetProtocol(mbTrans1759)
    argvalue0 := hive_metastore.NewAbortTxnsRequest()
    err1763 := argvalue0.Read(jsProt1762)
    if err1763 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxns(value0))
    fmt.Print("\n")
    break
  case "commit_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
      flag.Usage()
    }
    arg1764 := flag.Arg(1)
    mbTrans1765 := thrift.NewTMemoryBufferLen(len(arg1764))
    defer mbTrans1765.Close()
    _, err1766 := mbTrans1765.WriteString(arg1764)
    if err1766 != nil {
      Usage()
      return
    }
    factory1767 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1768 := factory1767.GetProtocol(mbTrans1765)
    argvalue0 := hive_metastore.NewCommitTxnRequest()
    err1769 := argvalue0.Read(jsProt1768)
    if err1769 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTxn(value0))
    fmt.Print("\n")
    break
  case "get_latest_txnid_in_conflict":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLatestTxnidInConflict requires 1 args")
      flag.Usage()
    }
    argvalue0, err1770 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1770 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLatestTxnidInConflict(value0))
    fmt.Print("\n")
    break
  case "repl_tbl_writeid_state":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplTblWriteidState requires 1 args")
      flag.Usage()
    }
    arg1771 := flag.Arg(1)
    mbTrans1772 := thrift.NewTMemoryBufferLen(len(arg1771))
    defer mbTrans1772.Close()
    _, err1773 := mbTrans1772.WriteString(arg1771)
    if err1773 != nil {
      Usage()
      return
    }
    factory1774 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1775 := factory1774.GetProtocol(mbTrans1772)
    argvalue0 := hive_metastore.NewReplTblWriteIdStateRequest()
    err1776 := argvalue0.Read(jsProt1775)
    if err1776 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplTblWriteidState(value0))
    fmt.Print("\n")
    break
  case "get_valid_write_ids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetValidWriteIds requires 1 args")
      flag.Usage()
    }
    arg1777 := flag.Arg(1)
    mbTrans1778 := thrift.NewTMemoryBufferLen(len(arg1777))
    defer mbTrans1778.Close()
    _, err1779 := mbTrans1778.WriteString(arg1777)
    if err1779 != nil {
      Usage()
      return
    }
    factory1780 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1781 := factory1780.GetProtocol(mbTrans1778)
    argvalue0 := hive_metastore.NewGetValidWriteIdsRequest()
    err1782 := argvalue0.Read(jsProt1781)
    if err1782 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValidWriteIds(value0))
    fmt.Print("\n")
    break
  case "allocate_table_write_ids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AllocateTableWriteIds requires 1 args")
      flag.Usage()
    }
    arg1783 := flag.Arg(1)
    mbTrans1784 := thrift.NewTMemoryBufferLen(len(arg1783))
    defer mbTrans1784.Close()
    _, err1785 := mbTrans1784.WriteString(arg1783)
    if err1785 != nil {
      Usage()
      return
    }
    factory1786 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1787 := factory1786.GetProtocol(mbTrans1784)
    argvalue0 := hive_metastore.NewAllocateTableWriteIdsRequest()
    err1788 := argvalue0.Read(jsProt1787)
    if err1788 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AllocateTableWriteIds(value0))
    fmt.Print("\n")
    break
  case "get_max_allocated_table_write_id":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMaxAllocatedTableWriteID requires 1 args")
      flag.Usage()
    }
    arg1789 := flag.Arg(1)
    mbTrans1790 := thrift.NewTMemoryBufferLen(len(arg1789))
    defer mbTrans1790.Close()
    _, err1791 := mbTrans1790.WriteString(arg1789)
    if err1791 != nil {
      Usage()
      return
    }
    factory1792 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1793 := factory1792.GetProtocol(mbTrans1790)
    argvalue0 := hive_metastore.NewMaxAllocatedTableWriteIdRequest()
    err1794 := argvalue0.Read(jsProt1793)
    if err1794 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetMaxAllocatedTableWriteID(value0))
    fmt.Print("\n")
    break
  case "seed_write_id":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SeedWriteID requires 1 args")
      flag.Usage()
    }
    arg1795 := flag.Arg(1)
    mbTrans1796 := thrift.NewTMemoryBufferLen(len(arg1795))
    defer mbTrans1796.Close()
    _, err1797 := mbTrans1796.WriteString(arg1795)
    if err1797 != nil {
      Usage()
      return
    }
    factory1798 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1799 := factory1798.GetProtocol(mbTrans1796)
    argvalue0 := hive_metastore.NewSeedTableWriteIdsRequest()
    err1800 := argvalue0.Read(jsProt1799)
    if err1800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SeedWriteID(value0))
    fmt.Print("\n")
    break
  case "seed_txn_id":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SeedTxnID requires 1 args")
      flag.Usage()
    }
    arg1801 := flag.Arg(1)
    mbTrans1802 := thrift.NewTMemoryBufferLen(len(arg1801))
    defer mbTrans1802.Close()
    _, err1803 := mbTrans1802.WriteString(arg1801)
    if err1803 != nil {
      Usage()
      return
    }
    factory1804 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1805 := factory1804.GetProtocol(mbTrans1802)
    argvalue0 := hive_metastore.NewSeedTxnIdRequest()
    err1806 := argvalue0.Read(jsProt1805)
    if err1806 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SeedTxnID(value0))
    fmt.Print("\n")
    break
  case "lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Lock requires 1 args")
      flag.Usage()
    }
    arg1807 := flag.Arg(1)
    mbTrans1808 := thrift.NewTMemoryBufferLen(len(arg1807))
    defer mbTrans1808.Close()
    _, err1809 := mbTrans1808.WriteString(arg1807)
    if err1809 != nil {
      Usage()
      return
    }
    factory1810 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1811 := factory1810.GetProtocol(mbTrans1808)
    argvalue0 := hive_metastore.NewLockRequest()
    err1812 := argvalue0.Read(jsProt1811)
    if err1812 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Lock(value0))
    fmt.Print("\n")
    break
  case "check_lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
      flag.Usage()
    }
    arg1813 := flag.Arg(1)
    mbTrans1814 := thrift.NewTMemoryBufferLen(len(arg1813))
    defer mbTrans1814.Close()
    _, err1815 := mbTrans1814.WriteString(arg1813)
    if err1815 != nil {
      Usage()
      return
    }
    factory1816 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1817 := factory1816.GetProtocol(mbTrans1814)
    argvalue0 := hive_metastore.NewCheckLockRequest()
    err1818 := argvalue0.Read(jsProt1817)
    if err1818 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckLock(value0))
    fmt.Print("\n")
    break
  case "unlock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
      flag.Usage()
    }
    arg1819 := flag.Arg(1)
    mbTrans1820 := thrift.NewTMemoryBufferLen(len(arg1819))
    defer mbTrans1820.Close()
    _, err1821 := mbTrans1820.WriteString(arg1819)
    if err1821 != nil {
      Usage()
      return
    }
    factory1822 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1823 := factory1822.GetProtocol(mbTrans1820)
    argvalue0 := hive_metastore.NewUnlockRequest()
    err1824 := argvalue0.Read(jsProt1823)
    if err1824 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unlock(value0))
    fmt.Print("\n")
    break
  case "show_locks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
      flag.Usage()
    }
    arg1825 := flag.Arg(1)
    mbTrans1826 := thrift.NewTMemoryBufferLen(len(arg1825))
    defer mbTrans1826.Close()
    _, err1827 := mbTrans1826.WriteString(arg1825)
    if err1827 != nil {
      Usage()
      return
    }
    factory1828 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1829 := factory1828.GetProtocol(mbTrans1826)
    argvalue0 := hive_metastore.NewShowLocksRequest()
    err1830 := argvalue0.Read(jsProt1829)
    if err1830 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowLocks(value0))
    fmt.Print("\n")
    break
  case "heartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
      flag.Usage()
    }
    arg1831 := flag.Arg(1)
    mbTrans1832 := thrift.NewTMemoryBufferLen(len(arg1831))
    defer mbTrans1832.Close()
    _, err1833 := mbTrans1832.WriteString(arg1831)
    if err1833 != nil {
      Usage()
      return
    }
    factory1834 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1835 := factory1834.GetProtocol(mbTrans1832)
    argvalue0 := hive_metastore.NewHeartbeatRequest()
    err1836 := argvalue0.Read(jsProt1835)
    if err1836 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Heartbeat(value0))
    fmt.Print("\n")
    break
  case "heartbeat_txn_range":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
      flag.Usage()
    }
    arg1837 := flag.Arg(1)
    mbTrans1838 := thrift.NewTMemoryBufferLen(len(arg1837))
    defer mbTrans1838.Close()
    _, err1839 := mbTrans1838.WriteString(arg1837)
    if err1839 != nil {
      Usage()
      return
    }
    factory1840 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1841 := factory1840.GetProtocol(mbTrans1838)
    argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
    err1842 := argvalue0.Read(jsProt1841)
    if err1842 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartbeatTxnRange(value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact requires 1 args")
      flag.Usage()
    }
    arg1843 := flag.Arg(1)
    mbTrans1844 := thrift.NewTMemoryBufferLen(len(arg1843))
    defer mbTrans1844.Close()
    _, err1845 := mbTrans1844.WriteString(arg1843)
    if err1845 != nil {
      Usage()
      return
    }
    factory1846 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1847 := factory1846.GetProtocol(mbTrans1844)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err1848 := argvalue0.Read(jsProt1847)
    if err1848 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact(value0))
    fmt.Print("\n")
    break
  case "compact2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
      flag.Usage()
    }
    arg1849 := flag.Arg(1)
    mbTrans1850 := thrift.NewTMemoryBufferLen(len(arg1849))
    defer mbTrans1850.Close()
    _, err1851 := mbTrans1850.WriteString(arg1849)
    if err1851 != nil {
      Usage()
      return
    }
    factory1852 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1853 := factory1852.GetProtocol(mbTrans1850)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err1854 := argvalue0.Read(jsProt1853)
    if err1854 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact2(value0))
    fmt.Print("\n")
    break
  case "show_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
      flag.Usage()
    }
    arg1855 := flag.Arg(1)
    mbTrans1856 := thrift.NewTMemoryBufferLen(len(arg1855))
    defer mbTrans1856.Close()
    _, err1857 := mbTrans1856.WriteString(arg1855)
    if err1857 != nil {
      Usage()
      return
    }
    factory1858 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1859 := factory1858.GetProtocol(mbTrans1856)
    argvalue0 := hive_metastore.NewShowCompactRequest()
    err1860 := argvalue0.Read(jsProt1859)
    if err1860 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowCompact(value0))
    fmt.Print("\n")
    break
  case "add_dynamic_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
      flag.Usage()
    }
    arg1861 := flag.Arg(1)
    mbTrans1862 := thrift.NewTMemoryBufferLen(len(arg1861))
    defer mbTrans1862.Close()
    _, err1863 := mbTrans1862.WriteString(arg1861)
    if err1863 != nil {
      Usage()
      return
    }
    factory1864 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1865 := factory1864.GetProtocol(mbTrans1862)
    argvalue0 := hive_metastore.NewAddDynamicPartitions()
    err1866 := argvalue0.Read(jsProt1865)
    if err1866 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDynamicPartitions(value0))
    fmt.Print("\n")
    break
  case "find_next_compact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindNextCompact requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindNextCompact(value0, value1))
    fmt.Print("\n")
    break
  case "update_compactor_state":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateCompactorState requires 2 args")
      flag.Usage()
    }
    arg1869 := flag.Arg(1)
    mbTrans1870 := thrift.NewTMemoryBufferLen(len(arg1869))
    defer mbTrans1870.Close()
    _, err1871 := mbTrans1870.WriteString(arg1869)
    if err1871 != nil {
      Usage()
      return
    }
    factory1872 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1873 := factory1872.GetProtocol(mbTrans1870)
    argvalue0 := hive_metastore.NewCompactionInfoStruct()
    err1874 := argvalue0.Read(jsProt1873)
    if err1874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1875 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1875 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateCompactorState(value0, value1))
    fmt.Print("\n")
    break
  case "find_columns_with_stats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindColumnsWithStats requires 1 args")
      flag.Usage()
    }
    arg1876 := flag.Arg(1)
    mbTrans1877 := thrift.NewTMemoryBufferLen(len(arg1876))
    defer mbTrans1877.Close()
    _, err1878 := mbTrans1877.WriteString(arg1876)
    if err1878 != nil {
      Usage()
      return
    }
    factory1879 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1880 := factory1879.GetProtocol(mbTrans1877)
    argvalue0 := hive_metastore.NewCompactionInfoStruct()
    err1881 := argvalue0.Read(jsProt1880)
    if err1881 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindColumnsWithStats(value0))
    fmt.Print("\n")
    break
  case "mark_cleaned":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MarkCleaned requires 1 args")
      flag.Usage()
    }
    arg1882 := flag.Arg(1)
    mbTrans1883 := thrift.NewTMemoryBufferLen(len(arg1882))
    defer mbTrans1883.Close()
    _, err1884 := mbTrans1883.WriteString(arg1882)
    if err1884 != nil {
      Usage()
      return
    }
    factory1885 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1886 := factory1885.GetProtocol(mbTrans1883)
    argvalue0 := hive_metastore.NewCompactionInfoStruct()
    err1887 := argvalue0.Read(jsProt1886)
    if err1887 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MarkCleaned(value0))
    fmt.Print("\n")
    break
  case "mark_compacted":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MarkCompacted requires 1 args")
      flag.Usage()
    }
    arg1888 := flag.Arg(1)
    mbTrans1889 := thrift.NewTMemoryBufferLen(len(arg1888))
    defer mbTrans1889.Close()
    _, err1890 := mbTrans1889.WriteString(arg1888)
    if err1890 != nil {
      Usage()
      return
    }
    factory1891 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1892 := factory1891.GetProtocol(mbTrans1889)
    argvalue0 := hive_metastore.NewCompactionInfoStruct()
    err1893 := argvalue0.Read(jsProt1892)
    if err1893 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MarkCompacted(value0))
    fmt.Print("\n")
    break
  case "mark_failed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MarkFailed requires 1 args")
      flag.Usage()
    }
    arg1894 := flag.Arg(1)
    mbTrans1895 := thrift.NewTMemoryBufferLen(len(arg1894))
    defer mbTrans1895.Close()
    _, err1896 := mbTrans1895.WriteString(arg1894)
    if err1896 != nil {
      Usage()
      return
    }
    factory1897 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1898 := factory1897.GetProtocol(mbTrans1895)
    argvalue0 := hive_metastore.NewCompactionInfoStruct()
    err1899 := argvalue0.Read(jsProt1898)
    if err1899 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MarkFailed(value0))
    fmt.Print("\n")
    break
  case "set_hadoop_jobid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetHadoopJobid requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1901 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1901 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetHadoopJobid(value0, value1))
    fmt.Print("\n")
    break
  case "get_latest_committed_compaction_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLatestCommittedCompactionInfo requires 1 args")
      flag.Usage()
    }
    arg1902 := flag.Arg(1)
    mbTrans1903 := thrift.NewTMemoryBufferLen(len(arg1902))
    defer mbTrans1903.Close()
    _, err1904 := mbTrans1903.WriteString(arg1902)
    if err1904 != nil {
      Usage()
      return
    }
    factory1905 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1906 := factory1905.GetProtocol(mbTrans1903)
    argvalue0 := hive_metastore.NewGetLatestCommittedCompactionInfoRequest()
    err1907 := argvalue0.Read(jsProt1906)
    if err1907 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLatestCommittedCompactionInfo(value0))
    fmt.Print("\n")
    break
  case "get_next_notification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
      flag.Usage()
    }
    arg1908 := flag.Arg(1)
    mbTrans1909 := thrift.NewTMemoryBufferLen(len(arg1908))
    defer mbTrans1909.Close()
    _, err1910 := mbTrans1909.WriteString(arg1908)
    if err1910 != nil {
      Usage()
      return
    }
    factory1911 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1912 := factory1911.GetProtocol(mbTrans1909)
    argvalue0 := hive_metastore.NewNotificationEventRequest()
    err1913 := argvalue0.Read(jsProt1912)
    if err1913 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNextNotification(value0))
    fmt.Print("\n")
    break
  case "get_current_notificationEventId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCurrentNotificationEventId())
    fmt.Print("\n")
    break
  case "get_notification_events_count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
      flag.Usage()
    }
    arg1914 := flag.Arg(1)
    mbTrans1915 := thrift.NewTMemoryBufferLen(len(arg1914))
    defer mbTrans1915.Close()
    _, err1916 := mbTrans1915.WriteString(arg1914)
    if err1916 != nil {
      Usage()
      return
    }
    factory1917 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1918 := factory1917.GetProtocol(mbTrans1915)
    argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
    err1919 := argvalue0.Read(jsProt1918)
    if err1919 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationEventsCount(value0))
    fmt.Print("\n")
    break
  case "fire_listener_event":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
      flag.Usage()
    }
    arg1920 := flag.Arg(1)
    mbTrans1921 := thrift.NewTMemoryBufferLen(len(arg1920))
    defer mbTrans1921.Close()
    _, err1922 := mbTrans1921.WriteString(arg1920)
    if err1922 != nil {
      Usage()
      return
    }
    factory1923 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1924 := factory1923.GetProtocol(mbTrans1921)
    argvalue0 := hive_metastore.NewFireEventRequest()
    err1925 := argvalue0.Read(jsProt1924)
    if err1925 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FireListenerEvent(value0))
    fmt.Print("\n")
    break
  case "flushCache":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FlushCache())
    fmt.Print("\n")
    break
  case "add_write_notification_log":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddWriteNotificationLog requires 1 args")
      flag.Usage()
    }
    arg1926 := flag.Arg(1)
    mbTrans1927 := thrift.NewTMemoryBufferLen(len(arg1926))
    defer mbTrans1927.Close()
    _, err1928 := mbTrans1927.WriteString(arg1926)
    if err1928 != nil {
      Usage()
      return
    }
    factory1929 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1930 := factory1929.GetProtocol(mbTrans1927)
    argvalue0 := hive_metastore.NewWriteNotificationLogRequest()
    err1931 := argvalue0.Read(jsProt1930)
    if err1931 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddWriteNotificationLog(value0))
    fmt.Print("\n")
    break
  case "cm_recycle":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
      flag.Usage()
    }
    arg1932 := flag.Arg(1)
    mbTrans1933 := thrift.NewTMemoryBufferLen(len(arg1932))
    defer mbTrans1933.Close()
    _, err1934 := mbTrans1933.WriteString(arg1932)
    if err1934 != nil {
      Usage()
      return
    }
    factory1935 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1936 := factory1935.GetProtocol(mbTrans1933)
    argvalue0 := hive_metastore.NewCmRecycleRequest()
    err1937 := argvalue0.Read(jsProt1936)
    if err1937 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CmRecycle(value0))
    fmt.Print("\n")
    break
  case "get_file_metadata_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
      flag.Usage()
    }
    arg1938 := flag.Arg(1)
    mbTrans1939 := thrift.NewTMemoryBufferLen(len(arg1938))
    defer mbTrans1939.Close()
    _, err1940 := mbTrans1939.WriteString(arg1938)
    if err1940 != nil {
      Usage()
      return
    }
    factory1941 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1942 := factory1941.GetProtocol(mbTrans1939)
    argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
    err1943 := argvalue0.Read(jsProt1942)
    if err1943 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadataByExpr(value0))
    fmt.Print("\n")
    break
  case "get_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1944 := flag.Arg(1)
    mbTrans1945 := thrift.NewTMemoryBufferLen(len(arg1944))
    defer mbTrans1945.Close()
    _, err1946 := mbTrans1945.WriteString(arg1944)
    if err1946 != nil {
      Usage()
      return
    }
    factory1947 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1948 := factory1947.GetProtocol(mbTrans1945)
    argvalue0 := hive_metastore.NewGetFileMetadataRequest()
    err1949 := argvalue0.Read(jsProt1948)
    if err1949 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadata(value0))
    fmt.Print("\n")
    break
  case "put_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1950 := flag.Arg(1)
    mbTrans1951 := thrift.NewTMemoryBufferLen(len(arg1950))
    defer mbTrans1951.Close()
    _, err1952 := mbTrans1951.WriteString(arg1950)
    if err1952 != nil {
      Usage()
      return
    }
    factory1953 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1954 := factory1953.GetProtocol(mbTrans1951)
    argvalue0 := hive_metastore.NewPutFileMetadataRequest()
    err1955 := argvalue0.Read(jsProt1954)
    if err1955 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PutFileMetadata(value0))
    fmt.Print("\n")
    break
  case "clear_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1956 := flag.Arg(1)
    mbTrans1957 := thrift.NewTMemoryBufferLen(len(arg1956))
    defer mbTrans1957.Close()
    _, err1958 := mbTrans1957.WriteString(arg1956)
    if err1958 != nil {
      Usage()
      return
    }
    factory1959 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1960 := factory1959.GetProtocol(mbTrans1957)
    argvalue0 := hive_metastore.NewClearFileMetadataRequest()
    err1961 := argvalue0.Read(jsProt1960)
    if err1961 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearFileMetadata(value0))
    fmt.Print("\n")
    break
  case "cache_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1962 := flag.Arg(1)
    mbTrans1963 := thrift.NewTMemoryBufferLen(len(arg1962))
    defer mbTrans1963.Close()
    _, err1964 := mbTrans1963.WriteString(arg1962)
    if err1964 != nil {
      Usage()
      return
    }
    factory1965 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1966 := factory1965.GetProtocol(mbTrans1963)
    argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
    err1967 := argvalue0.Read(jsProt1966)
    if err1967 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CacheFileMetadata(value0))
    fmt.Print("\n")
    break
  case "get_metastore_db_uuid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetastoreDbUUID())
    fmt.Print("\n")
    break
  case "create_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1968 := flag.Arg(1)
    mbTrans1969 := thrift.NewTMemoryBufferLen(len(arg1968))
    defer mbTrans1969.Close()
    _, err1970 := mbTrans1969.WriteString(arg1968)
    if err1970 != nil {
      Usage()
      return
    }
    factory1971 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1972 := factory1971.GetProtocol(mbTrans1969)
    argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
    err1973 := argvalue0.Read(jsProt1972)
    if err1973 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateResourcePlan(value0))
    fmt.Print("\n")
    break
  case "get_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1974 := flag.Arg(1)
    mbTrans1975 := thrift.NewTMemoryBufferLen(len(arg1974))
    defer mbTrans1975.Close()
    _, err1976 := mbTrans1975.WriteString(arg1974)
    if err1976 != nil {
      Usage()
      return
    }
    factory1977 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1978 := factory1977.GetProtocol(mbTrans1975)
    argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
    err1979 := argvalue0.Read(jsProt1978)
    if err1979 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourcePlan(value0))
    fmt.Print("\n")
    break
  case "get_active_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1980 := flag.Arg(1)
    mbTrans1981 := thrift.NewTMemoryBufferLen(len(arg1980))
    defer mbTrans1981.Close()
    _, err1982 := mbTrans1981.WriteString(arg1980)
    if err1982 != nil {
      Usage()
      return
    }
    factory1983 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1984 := factory1983.GetProtocol(mbTrans1981)
    argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
    err1985 := argvalue0.Read(jsProt1984)
    if err1985 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetActiveResourcePlan(value0))
    fmt.Print("\n")
    break
  case "get_all_resource_plans":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
      flag.Usage()
    }
    arg1986 := flag.Arg(1)
    mbTrans1987 := thrift.NewTMemoryBufferLen(len(arg1986))
    defer mbTrans1987.Close()
    _, err1988 := mbTrans1987.WriteString(arg1986)
    if err1988 != nil {
      Usage()
      return
    }
    factory1989 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1990 := factory1989.GetProtocol(mbTrans1987)
    argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
    err1991 := argvalue0.Read(jsProt1990)
    if err1991 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllResourcePlans(value0))
    fmt.Print("\n")
    break
  case "alter_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1992 := flag.Arg(1)
    mbTrans1993 := thrift.NewTMemoryBufferLen(len(arg1992))
    defer mbTrans1993.Close()
    _, err1994 := mbTrans1993.WriteString(arg1992)
    if err1994 != nil {
      Usage()
      return
    }
    factory1995 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1996 := factory1995.GetProtocol(mbTrans1993)
    argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
    err1997 := argvalue0.Read(jsProt1996)
    if err1997 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterResourcePlan(value0))
    fmt.Print("\n")
    break
  case "validate_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1998 := flag.Arg(1)
    mbTrans1999 := thrift.NewTMemoryBufferLen(len(arg1998))
    defer mbTrans1999.Close()
    _, err2000 := mbTrans1999.WriteString(arg1998)
    if err2000 != nil {
      Usage()
      return
    }
    factory2001 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2002 := factory2001.GetProtocol(mbTrans1999)
    argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
    err2003 := argvalue0.Read(jsProt2002)
    if err2003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ValidateResourcePlan(value0))
    fmt.Print("\n")
    break
  case "drop_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2004 := flag.Arg(1)
    mbTrans2005 := thrift.NewTMemoryBufferLen(len(arg2004))
    defer mbTrans2005.Close()
    _, err2006 := mbTrans2005.WriteString(arg2004)
    if err2006 != nil {
      Usage()
      return
    }
    factory2007 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2008 := factory2007.GetProtocol(mbTrans2005)
    argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
    err2009 := argvalue0.Read(jsProt2008)
    if err2009 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropResourcePlan(value0))
    fmt.Print("\n")
    break
  case "create_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2010 := flag.Arg(1)
    mbTrans2011 := thrift.NewTMemoryBufferLen(len(arg2010))
    defer mbTrans2011.Close()
    _, err2012 := mbTrans2011.WriteString(arg2010)
    if err2012 != nil {
      Usage()
      return
    }
    factory2013 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2014 := factory2013.GetProtocol(mbTrans2011)
    argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
    err2015 := argvalue0.Read(jsProt2014)
    if err2015 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmTrigger(value0))
    fmt.Print("\n")
    break
  case "alter_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2016 := flag.Arg(1)
    mbTrans2017 := thrift.NewTMemoryBufferLen(len(arg2016))
    defer mbTrans2017.Close()
    _, err2018 := mbTrans2017.WriteString(arg2016)
    if err2018 != nil {
      Usage()
      return
    }
    factory2019 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2020 := factory2019.GetProtocol(mbTrans2017)
    argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
    err2021 := argvalue0.Read(jsProt2020)
    if err2021 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmTrigger(value0))
    fmt.Print("\n")
    break
  case "drop_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2022 := flag.Arg(1)
    mbTrans2023 := thrift.NewTMemoryBufferLen(len(arg2022))
    defer mbTrans2023.Close()
    _, err2024 := mbTrans2023.WriteString(arg2022)
    if err2024 != nil {
      Usage()
      return
    }
    factory2025 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2026 := factory2025.GetProtocol(mbTrans2023)
    argvalue0 := hive_metastore.NewWMDropTriggerRequest()
    err2027 := argvalue0.Read(jsProt2026)
    if err2027 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmTrigger(value0))
    fmt.Print("\n")
    break
  case "get_triggers_for_resourceplan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
      flag.Usage()
    }
    arg2028 := flag.Arg(1)
    mbTrans2029 := thrift.NewTMemoryBufferLen(len(arg2028))
    defer mbTrans2029.Close()
    _, err2030 := mbTrans2029.WriteString(arg2028)
    if err2030 != nil {
      Usage()
      return
    }
    factory2031 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2032 := factory2031.GetProtocol(mbTrans2029)
    argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
    err2033 := argvalue0.Read(jsProt2032)
    if err2033 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTriggersForResourceplan(value0))
    fmt.Print("\n")
    break
  case "create_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmPool requires 1 args")
      flag.Usage()
    }
    arg2034 := flag.Arg(1)
    mbTrans2035 := thrift.NewTMemoryBufferLen(len(arg2034))
    defer mbTrans2035.Close()
    _, err2036 := mbTrans2035.WriteString(arg2034)
    if err2036 != nil {
      Usage()
      return
    }
    factory2037 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2038 := factory2037.GetProtocol(mbTrans2035)
    argvalue0 := hive_metastore.NewWMCreatePoolRequest()
    err2039 := argvalue0.Read(jsProt2038)
    if err2039 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmPool(value0))
    fmt.Print("\n")
    break
  case "alter_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmPool requires 1 args")
      flag.Usage()
    }
    arg2040 := flag.Arg(1)
    mbTrans2041 := thrift.NewTMemoryBufferLen(len(arg2040))
    defer mbTrans2041.Close()
    _, err2042 := mbTrans2041.WriteString(arg2040)
    if err2042 != nil {
      Usage()
      return
    }
    factory2043 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2044 := factory2043.GetProtocol(mbTrans2041)
    argvalue0 := hive_metastore.NewWMAlterPoolRequest()
    err2045 := argvalue0.Read(jsProt2044)
    if err2045 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmPool(value0))
    fmt.Print("\n")
    break
  case "drop_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmPool requires 1 args")
      flag.Usage()
    }
    arg2046 := flag.Arg(1)
    mbTrans2047 := thrift.NewTMemoryBufferLen(len(arg2046))
    defer mbTrans2047.Close()
    _, err2048 := mbTrans2047.WriteString(arg2046)
    if err2048 != nil {
      Usage()
      return
    }
    factory2049 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2050 := factory2049.GetProtocol(mbTrans2047)
    argvalue0 := hive_metastore.NewWMDropPoolRequest()
    err2051 := argvalue0.Read(jsProt2050)
    if err2051 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmPool(value0))
    fmt.Print("\n")
    break
  case "create_or_update_wm_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateOrUpdateWmMapping requires 1 args")
      flag.Usage()
    }
    arg2052 := flag.Arg(1)
    mbTrans2053 := thrift.NewTMemoryBufferLen(len(arg2052))
    defer mbTrans2053.Close()
    _, err2054 := mbTrans2053.WriteString(arg2052)
    if err2054 != nil {
      Usage()
      return
    }
    factory2055 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2056 := factory2055.GetProtocol(mbTrans2053)
    argvalue0 := hive_metastore.NewWMCreateOrUpdateMappingRequest()
    err2057 := argvalue0.Read(jsProt2056)
    if err2057 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateOrUpdateWmMapping(value0))
    fmt.Print("\n")
    break
  case "drop_wm_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmMapping requires 1 args")
      flag.Usage()
    }
    arg2058 := flag.Arg(1)
    mbTrans2059 := thrift.NewTMemoryBufferLen(len(arg2058))
    defer mbTrans2059.Close()
    _, err2060 := mbTrans2059.WriteString(arg2058)
    if err2060 != nil {
      Usage()
      return
    }
    factory2061 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2062 := factory2061.GetProtocol(mbTrans2059)
    argvalue0 := hive_metastore.NewWMDropMappingRequest()
    err2063 := argvalue0.Read(jsProt2062)
    if err2063 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmMapping(value0))
    fmt.Print("\n")
    break
  case "create_or_drop_wm_trigger_to_pool_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateOrDropWmTriggerToPoolMapping requires 1 args")
      flag.Usage()
    }
    arg2064 := flag.Arg(1)
    mbTrans2065 := thrift.NewTMemoryBufferLen(len(arg2064))
    defer mbTrans2065.Close()
    _, err2066 := mbTrans2065.WriteString(arg2064)
    if err2066 != nil {
      Usage()
      return
    }
    factory2067 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2068 := factory2067.GetProtocol(mbTrans2065)
    argvalue0 := hive_metastore.NewWMCreateOrDropTriggerToPoolMappingRequest()
    err2069 := argvalue0.Read(jsProt2068)
    if err2069 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateOrDropWmTriggerToPoolMapping(value0))
    fmt.Print("\n")
    break
  case "create_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateIschema requires 1 args")
      flag.Usage()
    }
    arg2070 := flag.Arg(1)
    mbTrans2071 := thrift.NewTMemoryBufferLen(len(arg2070))
    defer mbTrans2071.Close()
    _, err2072 := mbTrans2071.WriteString(arg2070)
    if err2072 != nil {
      Usage()
      return
    }
    factory2073 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2074 := factory2073.GetProtocol(mbTrans2071)
    argvalue0 := hive_metastore.NewISchema()
    err2075 := argvalue0.Read(jsProt2074)
    if err2075 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateIschema(value0))
    fmt.Print("\n")
    break
  case "alter_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterIschema requires 1 args")
      flag.Usage()
    }
    arg2076 := flag.Arg(1)
    mbTrans2077 := thrift.NewTMemoryBufferLen(len(arg2076))
    defer mbTrans2077.Close()
    _, err2078 := mbTrans2077.WriteString(arg2076)
    if err2078 != nil {
      Usage()
      return
    }
    factory2079 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2080 := factory2079.GetProtocol(mbTrans2077)
    argvalue0 := hive_metastore.NewAlterISchemaRequest()
    err2081 := argvalue0.Read(jsProt2080)
    if err2081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterIschema(value0))
    fmt.Print("\n")
    break
  case "get_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetIschema requires 1 args")
      flag.Usage()
    }
    arg2082 := flag.Arg(1)
    mbTrans2083 := thrift.NewTMemoryBufferLen(len(arg2082))
    defer mbTrans2083.Close()
    _, err2084 := mbTrans2083.WriteString(arg2082)
    if err2084 != nil {
      Usage()
      return
    }
    factory2085 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2086 := factory2085.GetProtocol(mbTrans2083)
    argvalue0 := hive_metastore.NewISchemaName()
    err2087 := argvalue0.Read(jsProt2086)
    if err2087 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetIschema(value0))
    fmt.Print("\n")
    break
  case "drop_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropIschema requires 1 args")
      flag.Usage()
    }
    arg2088 := flag.Arg(1)
    mbTrans2089 := thrift.NewTMemoryBufferLen(len(arg2088))
    defer mbTrans2089.Close()
    _, err2090 := mbTrans2089.WriteString(arg2088)
    if err2090 != nil {
      Usage()
      return
    }
    factory2091 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2092 := factory2091.GetProtocol(mbTrans2089)
    argvalue0 := hive_metastore.NewISchemaName()
    err2093 := argvalue0.Read(jsProt2092)
    if err2093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropIschema(value0))
    fmt.Print("\n")
    break
  case "add_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2094 := flag.Arg(1)
    mbTrans2095 := thrift.NewTMemoryBufferLen(len(arg2094))
    defer mbTrans2095.Close()
    _, err2096 := mbTrans2095.WriteString(arg2094)
    if err2096 != nil {
      Usage()
      return
    }
    factory2097 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2098 := factory2097.GetProtocol(mbTrans2095)
    argvalue0 := hive_metastore.NewSchemaVersion()
    err2099 := argvalue0.Read(jsProt2098)
    if err2099 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddSchemaVersion(value0))
    fmt.Print("\n")
    break
  case "get_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2100 := flag.Arg(1)
    mbTrans2101 := thrift.NewTMemoryBufferLen(len(arg2100))
    defer mbTrans2101.Close()
    _, err2102 := mbTrans2101.WriteString(arg2100)
    if err2102 != nil {
      Usage()
      return
    }
    factory2103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2104 := factory2103.GetProtocol(mbTrans2101)
    argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
    err2105 := argvalue0.Read(jsProt2104)
    if err2105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaVersion(value0))
    fmt.Print("\n")
    break
  case "get_schema_latest_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaLatestVersion requires 1 args")
      flag.Usage()
    }
    arg2106 := flag.Arg(1)
    mbTrans2107 := thrift.NewTMemoryBufferLen(len(arg2106))
    defer mbTrans2107.Close()
    _, err2108 := mbTrans2107.WriteString(arg2106)
    if err2108 != nil {
      Usage()
      return
    }
    factory2109 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2110 := factory2109.GetProtocol(mbTrans2107)
    argvalue0 := hive_metastore.NewISchemaName()
    err2111 := argvalue0.Read(jsProt2110)
    if err2111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaLatestVersion(value0))
    fmt.Print("\n")
    break
  case "get_schema_all_versions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaAllVersions requires 1 args")
      flag.Usage()
    }
    arg2112 := flag.Arg(1)
    mbTrans2113 := thrift.NewTMemoryBufferLen(len(arg2112))
    defer mbTrans2113.Close()
    _, err2114 := mbTrans2113.WriteString(arg2112)
    if err2114 != nil {
      Usage()
      return
    }
    factory2115 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2116 := factory2115.GetProtocol(mbTrans2113)
    argvalue0 := hive_metastore.NewISchemaName()
    err2117 := argvalue0.Read(jsProt2116)
    if err2117 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaAllVersions(value0))
    fmt.Print("\n")
    break
  case "drop_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2118 := flag.Arg(1)
    mbTrans2119 := thrift.NewTMemoryBufferLen(len(arg2118))
    defer mbTrans2119.Close()
    _, err2120 := mbTrans2119.WriteString(arg2118)
    if err2120 != nil {
      Usage()
      return
    }
    factory2121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2122 := factory2121.GetProtocol(mbTrans2119)
    argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
    err2123 := argvalue0.Read(jsProt2122)
    if err2123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSchemaVersion(value0))
    fmt.Print("\n")
    break
  case "get_schemas_by_cols":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemasByCols requires 1 args")
      flag.Usage()
    }
    arg2124 := flag.Arg(1)
    mbTrans2125 := thrift.NewTMemoryBufferLen(len(arg2124))
    defer mbTrans2125.Close()
    _, err2126 := mbTrans2125.WriteString(arg2124)
    if err2126 != nil {
      Usage()
      return
    }
    factory2127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2128 := factory2127.GetProtocol(mbTrans2125)
    argvalue0 := hive_metastore.NewFindSchemasByColsRqst()
    err2129 := argvalue0.Read(jsProt2128)
    if err2129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemasByCols(value0))
    fmt.Print("\n")
    break
  case "map_schema_version_to_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapSchemaVersionToSerde requires 1 args")
      flag.Usage()
    }
    arg2130 := flag.Arg(1)
    mbTrans2131 := thrift.NewTMemoryBufferLen(len(arg2130))
    defer mbTrans2131.Close()
    _, err2132 := mbTrans2131.WriteString(arg2130)
    if err2132 != nil {
      Usage()
      return
    }
    factory2133 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2134 := factory2133.GetProtocol(mbTrans2131)
    argvalue0 := hive_metastore.NewMapSchemaVersionToSerdeRequest()
    err2135 := argvalue0.Read(jsProt2134)
    if err2135 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapSchemaVersionToSerde(value0))
    fmt.Print("\n")
    break
  case "set_schema_version_state":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetSchemaVersionState requires 1 args")
      flag.Usage()
    }
    arg2136 := flag.Arg(1)
    mbTrans2137 := thrift.NewTMemoryBufferLen(len(arg2136))
    defer mbTrans2137.Close()
    _, err2138 := mbTrans2137.WriteString(arg2136)
    if err2138 != nil {
      Usage()
      return
    }
    factory2139 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2140 := factory2139.GetProtocol(mbTrans2137)
    argvalue0 := hive_metastore.NewSetSchemaVersionStateRequest()
    err2141 := argvalue0.Read(jsProt2140)
    if err2141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetSchemaVersionState(value0))
    fmt.Print("\n")
    break
  case "add_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddSerde requires 1 args")
      flag.Usage()
    }
    arg2142 := flag.Arg(1)
    mbTrans2143 := thrift.NewTMemoryBufferLen(len(arg2142))
    defer mbTrans2143.Close()
    _, err2144 := mbTrans2143.WriteString(arg2142)
    if err2144 != nil {
      Usage()
      return
    }
    factory2145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2146 := factory2145.GetProtocol(mbTrans2143)
    argvalue0 := hive_metastore.NewSerDeInfo()
    err2147 := argvalue0.Read(jsProt2146)
    if err2147 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddSerde(value0))
    fmt.Print("\n")
    break
  case "get_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSerde requires 1 args")
      flag.Usage()
    }
    arg2148 := flag.Arg(1)
    mbTrans2149 := thrift.NewTMemoryBufferLen(len(arg2148))
    defer mbTrans2149.Close()
    _, err2150 := mbTrans2149.WriteString(arg2148)
    if err2150 != nil {
      Usage()
      return
    }
    factory2151 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2152 := factory2151.GetProtocol(mbTrans2149)
    argvalue0 := hive_metastore.NewGetSerdeRequest()
    err2153 := argvalue0.Read(jsProt2152)
    if err2153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSerde(value0))
    fmt.Print("\n")
    break
  case "get_lock_materialization_rebuild":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetLockMaterializationRebuild requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err2156 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err2156 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetLockMaterializationRebuild(value0, value1, value2))
    fmt.Print("\n")
    break
  case "heartbeat_lock_materialization_rebuild":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "HeartbeatLockMaterializationRebuild requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err2159 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err2159 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.HeartbeatLockMaterializationRebuild(value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_runtime_stats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddRuntimeStats requires 1 args")
      flag.Usage()
    }
    arg2160 := flag.Arg(1)
    mbTrans2161 := thrift.NewTMemoryBufferLen(len(arg2160))
    defer mbTrans2161.Close()
    _, err2162 := mbTrans2161.WriteString(arg2160)
    if err2162 != nil {
      Usage()
      return
    }
    factory2163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2164 := factory2163.GetProtocol(mbTrans2161)
    argvalue0 := hive_metastore.NewRuntimeStat()
    err2165 := argvalue0.Read(jsProt2164)
    if err2165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddRuntimeStats(value0))
    fmt.Print("\n")
    break
  case "get_runtime_stats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRuntimeStats requires 1 args")
      flag.Usage()
    }
    arg2166 := flag.Arg(1)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil {
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    argvalue0 := hive_metastore.NewGetRuntimeStatsRequest()
    err2171 := argvalue0.Read(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRuntimeStats(value0))
    fmt.Print("\n")
    break
  case "get_partitions_with_specs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithSpecs requires 1 args")
      flag.Usage()
    }
    arg2172 := flag.Arg(1)
    mbTrans2173 := thrift.NewTMemoryBufferLen(len(arg2172))
    defer mbTrans2173.Close()
    _, err2174 := mbTrans2173.WriteString(arg2172)
    if err2174 != nil {
      Usage()
      return
    }
    factory2175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2176 := factory2175.GetProtocol(mbTrans2173)
    argvalue0 := hive_metastore.NewGetPartitionsRequest()
    err2177 := argvalue0.Read(jsProt2176)
    if err2177 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsWithSpecs(value0))
    fmt.Print("\n")
    break
  case "scheduled_query_poll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduledQueryPoll requires 1 args")
      flag.Usage()
    }
    arg2178 := flag.Arg(1)
    mbTrans2179 := thrift.NewTMemoryBufferLen(len(arg2178))
    defer mbTrans2179.Close()
    _, err2180 := mbTrans2179.WriteString(arg2178)
    if err2180 != nil {
      Usage()
      return
    }
    factory2181 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2182 := factory2181.GetProtocol(mbTrans2179)
    argvalue0 := hive_metastore.NewScheduledQueryPollRequest()
    err2183 := argvalue0.Read(jsProt2182)
    if err2183 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduledQueryPoll(value0))
    fmt.Print("\n")
    break
  case "scheduled_query_maintenance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduledQueryMaintenance requires 1 args")
      flag.Usage()
    }
    arg2184 := flag.Arg(1)
    mbTrans2185 := thrift.NewTMemoryBufferLen(len(arg2184))
    defer mbTrans2185.Close()
    _, err2186 := mbTrans2185.WriteString(arg2184)
    if err2186 != nil {
      Usage()
      return
    }
    factory2187 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2188 := factory2187.GetProtocol(mbTrans2185)
    argvalue0 := hive_metastore.NewScheduledQueryMaintenanceRequest()
    err2189 := argvalue0.Read(jsProt2188)
    if err2189 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduledQueryMaintenance(value0))
    fmt.Print("\n")
    break
  case "scheduled_query_progress":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduledQueryProgress requires 1 args")
      flag.Usage()
    }
    arg2190 := flag.Arg(1)
    mbTrans2191 := thrift.NewTMemoryBufferLen(len(arg2190))
    defer mbTrans2191.Close()
    _, err2192 := mbTrans2191.WriteString(arg2190)
    if err2192 != nil {
      Usage()
      return
    }
    factory2193 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2194 := factory2193.GetProtocol(mbTrans2191)
    argvalue0 := hive_metastore.NewScheduledQueryProgressInfo()
    err2195 := argvalue0.Read(jsProt2194)
    if err2195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduledQueryProgress(value0))
    fmt.Print("\n")
    break
  case "get_scheduled_query":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetScheduledQuery requires 1 args")
      flag.Usage()
    }
    arg2196 := flag.Arg(1)
    mbTrans2197 := thrift.NewTMemoryBufferLen(len(arg2196))
    defer mbTrans2197.Close()
    _, err2198 := mbTrans2197.WriteString(arg2196)
    if err2198 != nil {
      Usage()
      return
    }
    factory2199 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2200 := factory2199.GetProtocol(mbTrans2197)
    argvalue0 := hive_metastore.NewScheduledQueryKey()
    err2201 := argvalue0.Read(jsProt2200)
    if err2201 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetScheduledQuery(value0))
    fmt.Print("\n")
    break
  case "add_replication_metrics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddReplicationMetrics requires 1 args")
      flag.Usage()
    }
    arg2202 := flag.Arg(1)
    mbTrans2203 := thrift.NewTMemoryBufferLen(len(arg2202))
    defer mbTrans2203.Close()
    _, err2204 := mbTrans2203.WriteString(arg2202)
    if err2204 != nil {
      Usage()
      return
    }
    factory2205 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2206 := factory2205.GetProtocol(mbTrans2203)
    argvalue0 := hive_metastore.NewReplicationMetricList()
    err2207 := argvalue0.Read(jsProt2206)
    if err2207 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddReplicationMetrics(value0))
    fmt.Print("\n")
    break
  case "get_replication_metrics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReplicationMetrics requires 1 args")
      flag.Usage()
    }
    arg2208 := flag.Arg(1)
    mbTrans2209 := thrift.NewTMemoryBufferLen(len(arg2208))
    defer mbTrans2209.Close()
    _, err2210 := mbTrans2209.WriteString(arg2208)
    if err2210 != nil {
      Usage()
      return
    }
    factory2211 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2212 := factory2211.GetProtocol(mbTrans2209)
    argvalue0 := hive_metastore.NewGetReplicationMetricsRequest()
    err2213 := argvalue0.Read(jsProt2212)
    if err2213 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetReplicationMetrics(value0))
    fmt.Print("\n")
    break
  case "get_open_txns_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOpenTxnsReq requires 1 args")
      flag.Usage()
    }
    arg2214 := flag.Arg(1)
    mbTrans2215 := thrift.NewTMemoryBufferLen(len(arg2214))
    defer mbTrans2215.Close()
    _, err2216 := mbTrans2215.WriteString(arg2214)
    if err2216 != nil {
      Usage()
      return
    }
    factory2217 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2218 := factory2217.GetProtocol(mbTrans2215)
    argvalue0 := hive_metastore.NewGetOpenTxnsRequest()
    err2219 := argvalue0.Read(jsProt2218)
    if err2219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetOpenTxnsReq(value0))
    fmt.Print("\n")
    break
  case "create_stored_procedure":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateStoredProcedure requires 1 args")
      flag.Usage()
    }
    arg2220 := flag.Arg(1)
    mbTrans2221 := thrift.NewTMemoryBufferLen(len(arg2220))
    defer mbTrans2221.Close()
    _, err2222 := mbTrans2221.WriteString(arg2220)
    if err2222 != nil {
      Usage()
      return
    }
    factory2223 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2224 := factory2223.GetProtocol(mbTrans2221)
    argvalue0 := hive_metastore.NewStoredProcedure()
    err2225 := argvalue0.Read(jsProt2224)
    if err2225 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateStoredProcedure(value0))
    fmt.Print("\n")
    break
  case "get_stored_procedure":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStoredProcedure requires 1 args")
      flag.Usage()
    }
    arg2226 := flag.Arg(1)
    mbTrans2227 := thrift.NewTMemoryBufferLen(len(arg2226))
    defer mbTrans2227.Close()
    _, err2228 := mbTrans2227.WriteString(arg2226)
    if err2228 != nil {
      Usage()
      return
    }
    factory2229 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2230 := factory2229.GetProtocol(mbTrans2227)
    argvalue0 := hive_metastore.NewStoredProcedureRequest()
    err2231 := argvalue0.Read(jsProt2230)
    if err2231 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetStoredProcedure(value0))
    fmt.Print("\n")
    break
  case "drop_stored_procedure":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropStoredProcedure requires 1 args")
      flag.Usage()
    }
    arg2232 := flag.Arg(1)
    mbTrans2233 := thrift.NewTMemoryBufferLen(len(arg2232))
    defer mbTrans2233.Close()
    _, err2234 := mbTrans2233.WriteString(arg2232)
    if err2234 != nil {
      Usage()
      return
    }
    factory2235 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2236 := factory2235.GetProtocol(mbTrans2233)
    argvalue0 := hive_metastore.NewStoredProcedureRequest()
    err2237 := argvalue0.Read(jsProt2236)
    if err2237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropStoredProcedure(value0))
    fmt.Print("\n")
    break
  case "get_all_stored_procedures":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllStoredProcedures requires 1 args")
      flag.Usage()
    }
    arg2238 := flag.Arg(1)
    mbTrans2239 := thrift.NewTMemoryBufferLen(len(arg2238))
    defer mbTrans2239.Close()
    _, err2240 := mbTrans2239.WriteString(arg2238)
    if err2240 != nil {
      Usage()
      return
    }
    factory2241 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2242 := factory2241.GetProtocol(mbTrans2239)
    argvalue0 := hive_metastore.NewListStoredProcedureRequest()
    err2243 := argvalue0.Read(jsProt2242)
    if err2243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllStoredProcedures(value0))
    fmt.Print("\n")
    break
  case "find_package":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPackage requires 1 args")
      flag.Usage()
    }
    arg2244 := flag.Arg(1)
    mbTrans2245 := thrift.NewTMemoryBufferLen(len(arg2244))
    defer mbTrans2245.Close()
    _, err2246 := mbTrans2245.WriteString(arg2244)
    if err2246 != nil {
      Usage()
      return
    }
    factory2247 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2248 := factory2247.GetProtocol(mbTrans2245)
    argvalue0 := hive_metastore.NewGetPackageRequest()
    err2249 := argvalue0.Read(jsProt2248)
    if err2249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindPackage(value0))
    fmt.Print("\n")
    break
  case "add_package":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPackage requires 1 args")
      flag.Usage()
    }
    arg2250 := flag.Arg(1)
    mbTrans2251 := thrift.NewTMemoryBufferLen(len(arg2250))
    defer mbTrans2251.Close()
    _, err2252 := mbTrans2251.WriteString(arg2250)
    if err2252 != nil {
      Usage()
      return
    }
    factory2253 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2254 := factory2253.GetProtocol(mbTrans2251)
    argvalue0 := hive_metastore.NewAddPackageRequest()
    err2255 := argvalue0.Read(jsProt2254)
    if err2255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPackage(value0))
    fmt.Print("\n")
    break
  case "get_all_packages":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllPackages requires 1 args")
      flag.Usage()
    }
    arg2256 := flag.Arg(1)
    mbTrans2257 := thrift.NewTMemoryBufferLen(len(arg2256))
    defer mbTrans2257.Close()
    _, err2258 := mbTrans2257.WriteString(arg2256)
    if err2258 != nil {
      Usage()
      return
    }
    factory2259 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2260 := factory2259.GetProtocol(mbTrans2257)
    argvalue0 := hive_metastore.NewListPackageRequest()
    err2261 := argvalue0.Read(jsProt2260)
    if err2261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllPackages(value0))
    fmt.Print("\n")
    break
  case "drop_package":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropPackage requires 1 args")
      flag.Usage()
    }
    arg2262 := flag.Arg(1)
    mbTrans2263 := thrift.NewTMemoryBufferLen(len(arg2262))
    defer mbTrans2263.Close()
    _, err2264 := mbTrans2263.WriteString(arg2262)
    if err2264 != nil {
      Usage()
      return
    }
    factory2265 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2266 := factory2265.GetProtocol(mbTrans2263)
    argvalue0 := hive_metastore.NewDropPackageRequest()
    err2267 := argvalue0.Read(jsProt2266)
    if err2267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropPackage(value0))
    fmt.Print("\n")
    break
  case "getName":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetName requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetName())
    fmt.Print("\n")
    break
  case "getVersion":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion())
    fmt.Print("\n")
    break
  case "getStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatus())
    fmt.Print("\n")
    break
  case "getStatusDetails":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatusDetails())
    fmt.Print("\n")
    break
  case "getCounters":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCounters())
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCounter(value0))
    fmt.Print("\n")
    break
  case "setOption":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetOption(value0, value1))
    fmt.Print("\n")
    break
  case "getOption":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetOption(value0))
    fmt.Print("\n")
    break
  case "getOptions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOptions())
    fmt.Print("\n")
    break
  case "getCpuProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err2272 := (strconv.Atoi(flag.Arg(1)))
    if err2272 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCpuProfile(value0))
    fmt.Print("\n")
    break
  case "aliveSince":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.AliveSince())
    fmt.Print("\n")
    break
  case "reinitialize":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Reinitialize())
    fmt.Print("\n")
    break
  case "shutdown":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Shutdown())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
